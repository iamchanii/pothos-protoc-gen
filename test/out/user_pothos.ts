// @generated by pothos-protoc-gen v0.0.3 with parameter "import_extension=js,ts_nocheck=true,builder_path=../builder.js"
// @generated from file user.proto (package user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { create, enumFromJson } from '@bufbuild/protobuf';
import { builder } from '../builder.js';
import { makeGoogleProtobufStringValueInput } from './google/protobuf/wrappers_pothos.js';
import type {
  CreateUserRequest,
  CreateUserResponse,
  DeleteUserRequest,
  DeleteUserResponse,
  GetUserRequest,
  GetUserResponse,
  ListUsersRequest,
  ListUsersResponse,
  UpdateUserRequest,
  UpdateUserResponse,
  User,
} from './user_pb.js';
import {
  CreateUserRequestSchema,
  DeleteUserRequestSchema,
  GetUserRequestSchema,
  ListUsersRequestSchema,
  UpdateUserRequestSchema,
  UserRoleSchema,
  UserSchema,
  User_UserStatusSchema,
} from './user_pb.js';

/**
 * User role enum type
 *
 * @generated from enum user.v1.UserRole
 */
export const UserV1UserRoleRef = builder.enumType('UserV1UserRole', {
  description: 'User role enum type',
  values: {
    /**
     * @generated from enum value: ROLE_UNSPECIFIED = 0;
     */
    ROLE_UNSPECIFIED: {
      value: enumFromJson(UserRoleSchema, 'ROLE_UNSPECIFIED'),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_ADMIN = 1;
     */
    ROLE_ADMIN: {
      value: enumFromJson(UserRoleSchema, 'ROLE_ADMIN'),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_USER = 2;
     */
    ROLE_USER: {
      value: enumFromJson(UserRoleSchema, 'ROLE_USER'),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_GUEST = 3;
     */
    ROLE_GUEST: {
      value: enumFromJson(UserRoleSchema, 'ROLE_GUEST'),
      description: undefined,
      deprecated: false,
    },
  } as const,
});

/**
 * User status enum type for filtering
 *
 * @generated from enum user.v1.User.UserStatus
 */
export const UserV1User_UserStatusRef = builder.enumType(
  'UserV1User_UserStatus',
  {
    description: 'User status enum type for filtering',
    values: {
      /**
       * @generated from enum value: STATUS_UNSPECIFIED = 0;
       */
      STATUS_UNSPECIFIED: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_UNSPECIFIED'),
        description: undefined,
        deprecated: false,
      },
      /**
       * @generated from enum value: STATUS_ACTIVE = 1;
       */
      STATUS_ACTIVE: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_ACTIVE'),
        description: undefined,
        deprecated: false,
      },
      /**
       * @generated from enum value: STATUS_INACTIVE = 2;
       */
      STATUS_INACTIVE: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_INACTIVE'),
        description: undefined,
        deprecated: false,
      },
      /**
       * @generated from enum value: STATUS_SUSPENDED = 3;
       */
      STATUS_SUSPENDED: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_SUSPENDED'),
        description: undefined,
        deprecated: false,
      },
    } as const,
  },
);

/**
 * @generated from message user.v1.CreateUserResponse
 */
export const UserV1CreateUserResponseRef = builder
  .objectRef<CreateUserResponse>('UserV1CreateUserResponse')
  .implement({
    description: undefined,
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: user.v1.User user = 1;
       */
      user: t.field({
        type: 'UserV1User',
        description: undefined,
        deprecationReason: undefined,
        resolve: (parent) => parent.user,
      }),
    }),
  });

/**
 * Main User message
 *
 * @generated from message user.v1.User
 */
export const UserV1UserRef = builder.objectRef<User>('UserV1User').implement({
  description: 'Main User message',
  deprecationReason: undefined,
  fields: (t) => ({
    _: t.boolean({
      resolve: () => false,
      description:
        'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
    }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: 'String',
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => parent.id,
    }),
    /**
     * @generated from field: string name = 2;
     */
    name: t.field({
      type: 'String',
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => parent.name,
    }),
    /**
     * @generated from field: string email = 3;
     */
    email: t.field({
      type: 'String',
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => parent.email,
    }),
    /**
     * @generated from field: user.v1.UserRole role = 4;
     */
    role: t.field({
      type: 'UserV1UserRole',
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => enumFromJson(UserRoleSchema, parent.role),
    }),
    /**
     * @generated from field: user.v1.User.UserStatus status = 5;
     */
    status: t.field({
      type: 'UserV1User_UserStatus',
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => enumFromJson(User_UserStatusSchema, parent.status),
    }),
    /**
     * Map type field
     *
     * @generated from field: map<string, string> metadata = 6;
     */
    metadata: t.field({
      type: ['StringMapEntry'],
      description: 'Map type field',
      deprecationReason: undefined,
      resolve: (parent) =>
        Object.entries(parent.metadata).map(([key, value]) => ({
          key: String(key),
          value: value,
        })),
    }),
    /**
     * @generated from field: repeated string tags = 7;
     */
    tags: t.field({
      type: ['String'],
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => parent.tags,
    }),
    /**
     * @generated from field: int64 created_at = 8;
     */
    createdAt: t.field({
      type: 'String',
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => parent.createdAt?.toString(),
    }),
    /**
     * @generated from field: int64 updated_at = 9;
     */
    updatedAt: t.field({
      type: 'String',
      description: undefined,
      deprecationReason: undefined,
      resolve: (parent) => parent.updatedAt?.toString(),
    }),
    /**
     * Field using StringValue well-known type
     *
     * @generated from field: google.protobuf.StringValue description = 10;
     */
    description: t.field({
      type: 'String',
      description: 'Field using StringValue well-known type',
      deprecationReason: undefined,
      resolve: (parent) => parent.description,
    }),
  }),
});

/**
 * @generated from message user.v1.GetUserResponse
 */
export const UserV1GetUserResponseRef = builder
  .objectRef<GetUserResponse>('UserV1GetUserResponse')
  .implement({
    description: undefined,
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: user.v1.User user = 1;
       */
      user: t.field({
        type: 'UserV1User',
        description: undefined,
        deprecationReason: undefined,
        resolve: (parent) => parent.user,
      }),
    }),
  });

/**
 * @generated from message user.v1.UpdateUserResponse
 */
export const UserV1UpdateUserResponseRef = builder
  .objectRef<UpdateUserResponse>('UserV1UpdateUserResponse')
  .implement({
    description: undefined,
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: user.v1.User user = 1;
       */
      user: t.field({
        type: 'UserV1User',
        description: undefined,
        deprecationReason: undefined,
        resolve: (parent) => parent.user,
      }),
    }),
  });

/**
 * @generated from message user.v1.DeleteUserResponse
 */
export const UserV1DeleteUserResponseRef = builder
  .objectRef<DeleteUserResponse>('UserV1DeleteUserResponse')
  .implement({
    description: undefined,
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: bool success = 1;
       */
      success: t.field({
        type: 'Boolean',
        description: undefined,
        deprecationReason: undefined,
        resolve: (parent) => parent.success,
      }),
    }),
  });

/**
 * @generated from message user.v1.ListUsersResponse
 */
export const UserV1ListUsersResponseRef = builder
  .objectRef<ListUsersResponse>('UserV1ListUsersResponse')
  .implement({
    description: undefined,
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: repeated user.v1.User users = 1;
       */
      users: t.field({
        type: ['UserV1User'],
        description: undefined,
        deprecationReason: undefined,
        resolve: (parent) => parent.users,
      }),
      /**
       * @generated from field: string next_page_token = 2;
       */
      nextPageToken: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
        resolve: (parent) => parent.nextPageToken,
      }),
      /**
       * @generated from field: int32 total_count = 3;
       */
      totalCount: t.field({
        type: 'Int',
        description: undefined,
        deprecationReason: undefined,
        resolve: (parent) => parent.totalCount,
      }),
    }),
  });

/**
 * Create
 *
 * @generated from message user.v1.CreateUserRequest
 */
export const UserV1CreateUserRequestInputRef = builder
  .inputRef<CreateUserRequest>('UserV1CreateUserRequestInput')
  .implement({
    description: 'Create',
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        description:
          'Fake field because GraphQL does not support empty input. Do not use, It does nothing.',
      }),
      /**
       * @generated from field: string name = 1;
       */
      name: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: string email = 2;
       */
      email: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: user.v1.UserRole role = 3;
       */
      role: t.field({
        type: 'UserV1UserRole',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: map<string, string> metadata = 4;
       */
      metadata: t.field({
        type: ['StringMapEntryInput'],
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: repeated string tags = 5;
       */
      tags: t.field({
        type: ['String'],
        description: undefined,
        deprecationReason: undefined,
      }),
    }),
  });

/**
 * Read
 *
 * @generated from message user.v1.GetUserRequest
 */
export const UserV1GetUserRequestInputRef = builder
  .inputRef<GetUserRequest>('UserV1GetUserRequestInput')
  .implement({
    description: 'Read',
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        description:
          'Fake field because GraphQL does not support empty input. Do not use, It does nothing.',
      }),
      /**
       * @generated from field: string id = 1;
       */
      id: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
    }),
  });

/**
 * Update
 *
 * @generated from message user.v1.UpdateUserRequest
 */
export const UserV1UpdateUserRequestInputRef = builder
  .inputRef<UpdateUserRequest>('UserV1UpdateUserRequestInput')
  .implement({
    description: 'Update',
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        description:
          'Fake field because GraphQL does not support empty input. Do not use, It does nothing.',
      }),
      /**
       * @generated from field: string id = 1;
       */
      id: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: optional string name = 2;
       */
      name: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: optional string email = 3;
       */
      email: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: optional user.v1.UserRole role = 4;
       */
      role: t.field({
        type: 'UserV1UserRole',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: optional user.v1.User.UserStatus status = 5;
       */
      status: t.field({
        type: 'UserV1User_UserStatus',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: map<string, string> metadata = 6;
       */
      metadata: t.field({
        type: ['StringMapEntryInput'],
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: repeated string tags = 7;
       */
      tags: t.field({
        type: ['String'],
        description: undefined,
        deprecationReason: undefined,
      }),
    }),
  });

/**
 * Delete
 *
 * @generated from message user.v1.DeleteUserRequest
 */
export const UserV1DeleteUserRequestInputRef = builder
  .inputRef<DeleteUserRequest>('UserV1DeleteUserRequestInput')
  .implement({
    description: 'Delete',
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        description:
          'Fake field because GraphQL does not support empty input. Do not use, It does nothing.',
      }),
      /**
       * @generated from field: string id = 1;
       */
      id: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
    }),
  });

/**
 * List
 *
 * @generated from message user.v1.ListUsersRequest
 */
export const UserV1ListUsersRequestInputRef = builder
  .inputRef<ListUsersRequest>('UserV1ListUsersRequestInput')
  .implement({
    description: 'List',
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        description:
          'Fake field because GraphQL does not support empty input. Do not use, It does nothing.',
      }),
      /**
       * @generated from field: int32 page_size = 1;
       */
      pageSize: t.field({
        type: 'Int',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: string page_token = 2;
       */
      pageToken: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * Enum fields for filtering
       *
       * @generated from field: optional user.v1.User.UserStatus status = 3;
       */
      status: t.field({
        type: 'UserV1User_UserStatus',
        description: 'Enum fields for filtering',
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: optional user.v1.UserRole role = 4;
       */
      role: t.field({
        type: 'UserV1UserRole',
        description: undefined,
        deprecationReason: undefined,
      }),
    }),
  });

/**
 * Main User message
 *
 * @generated from message user.v1.User
 */
export const UserV1UserInputRef = builder
  .inputRef<User>('UserV1UserInput')
  .implement({
    description: 'Main User message',
    deprecationReason: undefined,
    fields: (t) => ({
      _: t.boolean({
        description:
          'Fake field because GraphQL does not support empty input. Do not use, It does nothing.',
      }),
      /**
       * @generated from field: string id = 1;
       */
      id: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: string name = 2;
       */
      name: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: string email = 3;
       */
      email: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: user.v1.UserRole role = 4;
       */
      role: t.field({
        type: 'UserV1UserRole',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: user.v1.User.UserStatus status = 5;
       */
      status: t.field({
        type: 'UserV1User_UserStatus',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * Map type field
       *
       * @generated from field: map<string, string> metadata = 6;
       */
      metadata: t.field({
        type: ['StringMapEntryInput'],
        description: 'Map type field',
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: repeated string tags = 7;
       */
      tags: t.field({
        type: ['String'],
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: int64 created_at = 8;
       */
      createdAt: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * @generated from field: int64 updated_at = 9;
       */
      updatedAt: t.field({
        type: 'String',
        description: undefined,
        deprecationReason: undefined,
      }),
      /**
       * Field using StringValue well-known type
       *
       * @generated from field: google.protobuf.StringValue description = 10;
       */
      description: t.field({
        type: 'String',
        description: 'Field using StringValue well-known type',
        deprecationReason: undefined,
      }),
    }),
  });

/**
 * A function to make a user.v1.CreateUserRequest input
 */
export function makeUserV1CreateUserRequestInput(
  input: any,
): CreateUserRequest {
  return create(CreateUserRequestSchema, {
    /**
     * @generated from field: string name = 1;
     */
    name: input?.name,
    /**
     * @generated from field: string email = 2;
     */
    email: input?.email,
    /**
     * @generated from field: user.v1.UserRole role = 3;
     */
    role: input?.role,
    /**
     * @generated from field: map<string, string> metadata = 4;
     */
    metadata: input?.metadata
      ? Object.fromEntries(
          input?.metadata?.map(({ key, value }) => [key, value]),
        )
      : null,
    /**
     * @generated from field: repeated string tags = 5;
     */
    tags: input?.tags,
  });
}

/**
 * A function to make a user.v1.GetUserRequest input
 */
export function makeUserV1GetUserRequestInput(input: any): GetUserRequest {
  return create(GetUserRequestSchema, {
    /**
     * @generated from field: string id = 1;
     */
    id: input?.id,
  });
}

/**
 * A function to make a user.v1.UpdateUserRequest input
 */
export function makeUserV1UpdateUserRequestInput(
  input: any,
): UpdateUserRequest {
  return create(UpdateUserRequestSchema, {
    /**
     * @generated from field: string id = 1;
     */
    id: input?.id,
    /**
     * @generated from field: optional string name = 2;
     */
    name: input?.name,
    /**
     * @generated from field: optional string email = 3;
     */
    email: input?.email,
    /**
     * @generated from field: optional user.v1.UserRole role = 4;
     */
    role: input?.role,
    /**
     * @generated from field: optional user.v1.User.UserStatus status = 5;
     */
    status: input?.status,
    /**
     * @generated from field: map<string, string> metadata = 6;
     */
    metadata: input?.metadata
      ? Object.fromEntries(
          input?.metadata?.map(({ key, value }) => [key, value]),
        )
      : null,
    /**
     * @generated from field: repeated string tags = 7;
     */
    tags: input?.tags,
  });
}

/**
 * A function to make a user.v1.DeleteUserRequest input
 */
export function makeUserV1DeleteUserRequestInput(
  input: any,
): DeleteUserRequest {
  return create(DeleteUserRequestSchema, {
    /**
     * @generated from field: string id = 1;
     */
    id: input?.id,
  });
}

/**
 * A function to make a user.v1.ListUsersRequest input
 */
export function makeUserV1ListUsersRequestInput(input: any): ListUsersRequest {
  return create(ListUsersRequestSchema, {
    /**
     * @generated from field: int32 page_size = 1;
     */
    pageSize: input?.pageSize,
    /**
     * @generated from field: string page_token = 2;
     */
    pageToken: input?.pageToken,
    /**
     * Enum fields for filtering
     *
     * @generated from field: optional user.v1.User.UserStatus status = 3;
     */
    status: input?.status,
    /**
     * @generated from field: optional user.v1.UserRole role = 4;
     */
    role: input?.role,
  });
}

/**
 * A function to make a user.v1.User input
 */
export function makeUserV1UserInput(input: any): User {
  return create(UserSchema, {
    /**
     * @generated from field: string id = 1;
     */
    id: input?.id,
    /**
     * @generated from field: string name = 2;
     */
    name: input?.name,
    /**
     * @generated from field: string email = 3;
     */
    email: input?.email,
    /**
     * @generated from field: user.v1.UserRole role = 4;
     */
    role: input?.role,
    /**
     * @generated from field: user.v1.User.UserStatus status = 5;
     */
    status: input?.status,
    /**
     * Map type field
     *
     * @generated from field: map<string, string> metadata = 6;
     */
    metadata: input?.metadata
      ? Object.fromEntries(
          input?.metadata?.map(({ key, value }) => [key, value]),
        )
      : null,
    /**
     * @generated from field: repeated string tags = 7;
     */
    tags: input?.tags,
    /**
     * @generated from field: int64 created_at = 8;
     */
    createdAt: input?.createdAt,
    /**
     * @generated from field: int64 updated_at = 9;
     */
    updatedAt: input?.updatedAt,
    /**
     * Field using StringValue well-known type
     *
     * @generated from field: google.protobuf.StringValue description = 10;
     */
    description: input?.description
      ? makeGoogleProtobufStringValueInput(input.description)
      : null,
  });
}

/**
 * Create a new user
 *
 * @generated from rpc user.v1.UserService.CreateUser
 */
builder.mutationField('userV1UserServiceCreateUser', (t) =>
  t.field({
    /**
     * @generated from message user.v1.CreateUserResponse
     */
    type: 'UserV1CreateUserResponse',
    description: 'Create a new user',
    deprecationReason: undefined,
    args: {
      /**
       * Create
       *
       * @generated from message user.v1.CreateUserRequest
       */
      input: t.arg({
        type: 'UserV1CreateUserRequestInput',
        required: true,
        description: 'Create',
      }),
    },
    resolve: (_root, { input }, context) => {
      if (!context.userV1UserService)
        throw new Error('userV1UserService is not provided.');
      return context.userV1UserService.createUser(
        makeUserV1CreateUserRequestInput(input),
        { headers: context.userV1UserServiceRequestHeaders },
      );
    },
  }),
);

/**
 * Get a user by ID
 *
 * @generated from rpc user.v1.UserService.GetUser
 */
builder.queryField('userV1UserServiceGetUser', (t) =>
  t.field({
    /**
     * @generated from message user.v1.GetUserResponse
     */
    type: 'UserV1GetUserResponse',
    description: 'Get a user by ID',
    deprecationReason: undefined,
    args: {
      /**
       * Read
       *
       * @generated from message user.v1.GetUserRequest
       */
      input: t.arg({
        type: 'UserV1GetUserRequestInput',
        required: true,
        description: 'Read',
      }),
    },
    resolve: (_root, { input }, context) => {
      if (!context.userV1UserService)
        throw new Error('userV1UserService is not provided.');
      return context.userV1UserService.getUser(
        makeUserV1GetUserRequestInput(input),
        { headers: context.userV1UserServiceRequestHeaders },
      );
    },
  }),
);

/**
 * Update an existing user
 *
 * @generated from rpc user.v1.UserService.UpdateUser
 */
builder.mutationField('userV1UserServiceUpdateUser', (t) =>
  t.field({
    /**
     * @generated from message user.v1.UpdateUserResponse
     */
    type: 'UserV1UpdateUserResponse',
    description: 'Update an existing user',
    deprecationReason: undefined,
    args: {
      /**
       * Update
       *
       * @generated from message user.v1.UpdateUserRequest
       */
      input: t.arg({
        type: 'UserV1UpdateUserRequestInput',
        required: true,
        description: 'Update',
      }),
    },
    resolve: (_root, { input }, context) => {
      if (!context.userV1UserService)
        throw new Error('userV1UserService is not provided.');
      return context.userV1UserService.updateUser(
        makeUserV1UpdateUserRequestInput(input),
        { headers: context.userV1UserServiceRequestHeaders },
      );
    },
  }),
);

/**
 * Delete a user
 *
 * @generated from rpc user.v1.UserService.DeleteUser
 */
builder.mutationField('userV1UserServiceDeleteUser', (t) =>
  t.field({
    /**
     * @generated from message user.v1.DeleteUserResponse
     */
    type: 'UserV1DeleteUserResponse',
    description: 'Delete a user',
    deprecationReason: undefined,
    args: {
      /**
       * Delete
       *
       * @generated from message user.v1.DeleteUserRequest
       */
      input: t.arg({
        type: 'UserV1DeleteUserRequestInput',
        required: true,
        description: 'Delete',
      }),
    },
    resolve: (_root, { input }, context) => {
      if (!context.userV1UserService)
        throw new Error('userV1UserService is not provided.');
      return context.userV1UserService.deleteUser(
        makeUserV1DeleteUserRequestInput(input),
        { headers: context.userV1UserServiceRequestHeaders },
      );
    },
  }),
);

/**
 * List users with optional filtering
 *
 * @generated from rpc user.v1.UserService.ListUsers
 */
builder.queryField('userV1UserServiceListUsers', (t) =>
  t.field({
    /**
     * @generated from message user.v1.ListUsersResponse
     */
    type: 'UserV1ListUsersResponse',
    description: 'List users with optional filtering',
    deprecationReason: undefined,
    args: {
      /**
       * List
       *
       * @generated from message user.v1.ListUsersRequest
       */
      input: t.arg({
        type: 'UserV1ListUsersRequestInput',
        required: true,
        description: 'List',
      }),
    },
    resolve: (_root, { input }, context) => {
      if (!context.userV1UserService)
        throw new Error('userV1UserService is not provided.');
      return context.userV1UserService.listUsers(
        makeUserV1ListUsersRequestInput(input),
        { headers: context.userV1UserServiceRequestHeaders },
      );
    },
  }),
);
