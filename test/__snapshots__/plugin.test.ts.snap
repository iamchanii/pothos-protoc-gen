// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Generate files 1`] = `
[
  {
    "content": "// @generated by pothos-protoc-gen v0.1.1 with parameter "builder_path=../builder"
// @generated from file user.proto (package user.v1, syntax proto3)
/* eslint-disable */

import { builder } from "../builder";
import { create, enumFromJson } from "@bufbuild/protobuf";
import type { User, User_Address, UserList, UserQuery, UserStatus } from "./user_pb";
import { User_Address_AddressTypeSchema, User_AddressSchema, UserQuerySchema, UserSchema, UserStatusSchema } from "./user_pb";
import { encodeBase64 } from "@pothos/core";
import { makeGoogleProtobufTimestampInput } from "./google/protobuf/timestamp_pothos";

/**
 * @generated from enum user.v1.UserStatus
 */
export const UserV1UserStatusRef = builder.enumType('UserV1UserStatus', {
  description: undefined,
  values: {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    'UNKNOWN': {
      value: enumFromJson(UserStatusSchema, "UNKNOWN"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: ACTIVE = 1;
     */
    'ACTIVE': {
      value: enumFromJson(UserStatusSchema, "ACTIVE"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: INACTIVE = 2;
     */
    'INACTIVE': {
      value: enumFromJson(UserStatusSchema, "INACTIVE"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: BANNED = 3;
     */
    'BANNED': {
      value: enumFromJson(UserStatusSchema, "BANNED"),
      description: undefined,
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from enum user.v1.User.Address.AddressType
 */
export const UserV1UserAddress_AddressTypeRef = builder.enumType('UserV1UserAddress_AddressType', {
  description: undefined,
  values: {
    /**
     * @generated from enum value: HOME = 0;
     */
    'HOME': {
      value: enumFromJson(User_Address_AddressTypeSchema, "HOME"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: WORK = 1;
     */
    'WORK': {
      value: enumFromJson(User_Address_AddressTypeSchema, "WORK"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: OTHER = 2;
     */
    'OTHER': {
      value: enumFromJson(User_Address_AddressTypeSchema, "OTHER"),
      description: undefined,
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from message user.v1.User
 */
export const UserV1UserRef = builder.objectRef<User>('UserV1User').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: 'ID',
      nullable: false,
      resolve: (parent) => encodeBase64(\`UserV1User:\${parent.id}\`),
      description: undefined,
      deprecationReason: undefined,
    }),
    rawId: t.field({
      type: 'String',
      resolve: (parent) => String(parent.id),
    }),
    /**
     * @generated from field: string name = 2;
     */
    name: t.field({
      type: "String",
      resolve: (parent) => parent.name,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.UserStatus status = 3;
     */
    status: t.field({
      type: "UserV1UserStatus",
      resolve: (parent) => enumFromJson(UserStatusSchema, parent.status),
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 4;
     */
    createdAt: t.field({
      type: "GoogleProtobufTimestamp",
      resolve: (parent) => parent.createdAt,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, int32> login_counts = 5;
     */
    loginCounts: t.field({
      type: ["IntMapEntry"],
      resolve: (parent) => Object.entries(parent.loginCounts).map(([key, value]) => ({ key: String(key), value: value })),
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, user.v1.UserStatus> account_settings = 6;
     */
    accountSettings: t.field({
      type: ["String_UserV1UserStatusMapEntry"],
      resolve: (parent) => Object.entries(parent.accountSettings).map(([key, value]) => ({ key: String(key), value: value })),
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User.Address address = 7 [deprecated = true];
     * @deprecated
     */
    address: t.field({
      type: "UserV1User_Address",
      resolve: (parent) => parent.address,
      description: undefined,
      deprecationReason: "Deprecated. See the comments for more details.",
    }),
    /**
     * @generated from field: map<string, user.v1.User.Address> addresses = 8;
     */
    addresses: t.field({
      type: ["String_UserV1User_AddressMapEntry"],
      resolve: (parent) => Object.entries(parent.addresses).map(([key, value]) => ({ key: String(key), value: value })),
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message user.v1.User.Address
 */
export const UserV1User_AddressRef = builder.objectRef<User_Address>('UserV1User_Address').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: string street = 1;
     */
    street: t.field({
      type: "String",
      resolve: (parent) => parent.street,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string city = 2;
     */
    city: t.field({
      type: "String",
      resolve: (parent) => parent.city,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string state = 3;
     */
    state: t.field({
      type: "String",
      resolve: (parent) => parent.state,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string postal_code = 4;
     */
    postalCode: t.field({
      type: "String",
      resolve: (parent) => parent.postalCode,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User.Address.AddressType type = 5;
     */
    type: t.field({
      type: "UserV1UserAddress_AddressType",
      resolve: (parent) => enumFromJson(User_Address_AddressTypeSchema, parent.type),
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message user.v1.UserList
 */
export const UserV1UserListRef = builder.objectRef<UserList>('UserV1UserList').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: repeated user.v1.User users = 1;
     */
    users: t.field({
      type: ["UserV1User"],
      resolve: (parent) => parent.users,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 total_users = 2;
     */
    totalUsers: t.field({
      type: "Int",
      resolve: (parent) => parent.totalUsers,
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from field: map<string, user.v1.UserStatus> account_settings = 6;
 */
export const String_UserV1UserStatusMapEntryRef = builder.objectRef<{ key: string; value: UserStatus }>('String_UserV1UserStatusMapEntry').implement({
  description: "Key-value pair for the map field accountSettings of user.v1.UserStatus.",
  fields: t => ({
    key: t.exposeString('key', { nullable: false }),
    value: t.expose('value', { type: 'UserV1UserStatus', nullable: false }),
  }),
});

/**
 * @generated from field: map<string, user.v1.User.Address> addresses = 8;
 */
export const String_UserV1User_AddressMapEntryRef = builder.objectRef<{ key: string; value: User_Address }>('String_UserV1User_AddressMapEntry').implement({
  description: "Key-value pair for the map field addresses of user.v1.User.Address.",
  fields: t => ({
    key: t.exposeString('key', { nullable: false }),
    value: t.expose('value', { type: 'UserV1User_Address', nullable: false }),
  }),
});

/**
 * @generated from message user.v1.UserQuery
 */
export const UserV1UserQueryInputRef = builder.inputRef<UserQuery>('UserV1UserQueryInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: string search_term = 1;
     */
    searchTerm: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 page_number = 2;
     */
    pageNumber: t.field({
      type: "Int",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 results_per_page = 3;
     */
    resultsPerPage: t.field({
      type: "Int",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp start_date = 4;
     */
    startDate: t.field({
      type: "GoogleProtobufTimestampInput",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp end_date = 5;
     */
    endDate: t.field({
      type: "GoogleProtobufTimestampInput",
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message user.v1.User
 */
export const UserV1UserInputRef = builder.inputRef<User>('UserV1UserInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string name = 2;
     */
    name: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.UserStatus status = 3;
     */
    status: t.field({
      type: "UserV1UserStatus",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 4;
     */
    createdAt: t.field({
      type: "GoogleProtobufTimestampInput",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, int32> login_counts = 5;
     */
    loginCounts: t.field({
      type: ["IntMapEntryInput"],
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, user.v1.UserStatus> account_settings = 6;
     */
    accountSettings: t.field({
      type: ["String_UserV1UserStatusMapEntryInput"],
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User.Address address = 7 [deprecated = true];
     * @deprecated
     */
    address: t.field({
      type: "UserV1User_AddressInput",
      description: undefined,
      deprecationReason: "Deprecated. See the comments for more details.",
    }),
    /**
     * @generated from field: map<string, user.v1.User.Address> addresses = 8;
     */
    addresses: t.field({
      type: ["String_UserV1User_AddressMapEntryInput"],
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message user.v1.User.Address
 */
export const UserV1User_AddressInputRef = builder.inputRef<User_Address>('UserV1User_AddressInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: string street = 1;
     */
    street: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string city = 2;
     */
    city: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string state = 3;
     */
    state: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string postal_code = 4;
     */
    postalCode: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User.Address.AddressType type = 5;
     */
    type: t.field({
      type: "UserV1UserAddress_AddressType",
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from field: map<string, user.v1.UserStatus> account_settings = 6;
 */
export const String_UserV1UserStatusMapEntryInputRef = builder.inputRef<{ key: string; value: UserStatus }>('String_UserV1UserStatusMapEntryInput').implement({
  description: "Key-value pair for the map field accountSettings of user.v1.UserStatus.",
  fields: t => ({
    key: t.string({ required: true }),
    value: t.field({ type: 'UserV1UserStatus', required: true }),
  }),
});

/**
 * @generated from field: map<string, user.v1.User.Address> addresses = 8;
 */
export const String_UserV1User_AddressMapEntryInputRef = builder.inputRef<{ key: string; value: User_Address }>('String_UserV1User_AddressMapEntryInput').implement({
  description: "Key-value pair for the map field addresses of user.v1.User.Address.",
  fields: t => ({
    key: t.string({ required: true }),
    value: t.field({ type: 'UserV1User_AddressInput', required: true }),
  }),
});

/**
 * A function to make a user.v1.UserQuery input
 */
export function makeUserV1UserQueryInput(input: any): UserQuery {
  return create(UserQuerySchema, {
    /**
     * @generated from field: string search_term = 1;
     */
    searchTerm: input?.searchTerm,
    /**
     * @generated from field: int32 page_number = 2;
     */
    pageNumber: input?.pageNumber,
    /**
     * @generated from field: int32 results_per_page = 3;
     */
    resultsPerPage: input?.resultsPerPage,
    /**
     * @generated from field: google.protobuf.Timestamp start_date = 4;
     */
    startDate: input?.startDate ? makeGoogleProtobufTimestampInput(input.startDate) : null,
    /**
     * @generated from field: google.protobuf.Timestamp end_date = 5;
     */
    endDate: input?.endDate ? makeGoogleProtobufTimestampInput(input.endDate) : null,
  });
}

/**
 * A function to make a user.v1.User input
 */
export function makeUserV1UserInput(input: any): User {
  return create(UserSchema, {
    /**
     * @generated from field: string id = 1;
     */
    id: input?.id,
    /**
     * @generated from field: string name = 2;
     */
    name: input?.name,
    /**
     * @generated from field: user.v1.UserStatus status = 3;
     */
    status: input?.status,
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 4;
     */
    createdAt: input?.createdAt ? makeGoogleProtobufTimestampInput(input.createdAt) : null,
    /**
     * @generated from field: map<string, int32> login_counts = 5;
     */
    loginCounts: input?.loginCounts ? Object.fromEntries(input?.loginCounts?.map(({ key, value }) => [key, value])) : null,
    /**
     * @generated from field: map<string, user.v1.UserStatus> account_settings = 6;
     */
    accountSettings: input?.accountSettings ? Object.fromEntries(input?.accountSettings?.map(({ key, value }) => [key, value])) : null,
    /**
     * @generated from field: user.v1.User.Address address = 7 [deprecated = true];
     * @deprecated
     */
    address: input?.address ? makeUserV1User_AddressInput(input.address) : null,
    /**
     * @generated from field: map<string, user.v1.User.Address> addresses = 8;
     */
    addresses: input?.addresses ? Object.fromEntries(input?.addresses?.map(({ key, value }) => [key, makeUserV1User_AddressInput(value)])) : null,
  });
}

/**
 * A function to make a user.v1.User.Address input
 */
export function makeUserV1User_AddressInput(input: any): User_Address {
  return create(User_AddressSchema, {
    /**
     * @generated from field: string street = 1;
     */
    street: input?.street,
    /**
     * @generated from field: string city = 2;
     */
    city: input?.city,
    /**
     * @generated from field: string state = 3;
     */
    state: input?.state,
    /**
     * @generated from field: string postal_code = 4;
     */
    postalCode: input?.postalCode,
    /**
     * @generated from field: user.v1.User.Address.AddressType type = 5;
     */
    type: input?.type,
  });
}

/**
 * @generated from rpc user.v1.UserService.GetUser
 */
builder.queryField('userV1UserServiceGetUser', t => t.field({
  /**
   * @generated from message user.v1.User
   */
  type: "UserV1User",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message google.protobuf.Empty
     */
    input: t.arg({
      type: "GoogleProtobufEmptyInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.userV1UserService) throw new Error('userV1UserService is not provided.');
    return context.userV1UserService.getUser(
      makeGoogleProtobufEmptyInput(input),
      { headers: context.userV1UserServiceRequestHeaders },
    );
  },
}));

/**
 * @generated from rpc user.v1.UserService.ListUsers
 */
builder.queryField('userV1UserServiceListUsers', t => t.field({
  /**
   * @generated from message user.v1.UserList
   */
  type: "UserV1UserList",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message user.v1.UserQuery
     */
    input: t.arg({
      type: "UserV1UserQueryInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.userV1UserService) throw new Error('userV1UserService is not provided.');
    return context.userV1UserService.listUsers(
      makeUserV1UserQueryInput(input),
      { headers: context.userV1UserServiceRequestHeaders },
    );
  },
}));

/**
 * @generated from rpc user.v1.UserService.CreateUser
 */
builder.mutationField('userV1UserServiceCreateUser', t => t.field({
  /**
   * @generated from message user.v1.User
   */
  type: "UserV1User",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message user.v1.User
     */
    input: t.arg({
      type: "UserV1UserInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.userV1UserService) throw new Error('userV1UserService is not provided.');
    return context.userV1UserService.createUser(
      makeUserV1UserInput(input),
      { headers: context.userV1UserServiceRequestHeaders },
    );
  },
}));

/**
 * @generated from rpc user.v1.UserService.DeleteUser
 */
builder.mutationField('userV1UserServiceDeleteUser', t => t.field({
  /**
   * @generated from message google.protobuf.Empty
   */
  type: "GoogleProtobufEmpty",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message user.v1.User
     */
    input: t.arg({
      type: "UserV1UserInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.userV1UserService) throw new Error('userV1UserService is not provided.');
    return context.userV1UserService.deleteUser(
      makeUserV1UserInput(input),
      { headers: context.userV1UserServiceRequestHeaders },
    );
  },
}));

",
    "name": "user_pothos.ts",
  },
  {
    "content": "// @generated by pothos-protoc-gen v0.1.1 with parameter "builder_path=../builder"
// @generated from file board.proto (package board.v1, syntax proto3)
/* eslint-disable */

import { builder } from "../builder";
import { create, enumFromJson } from "@bufbuild/protobuf";
import type { Comment, Post, Post_Attachment, PostList, PostQuery, PostStatus } from "./board_pb";
import { CommentSchema, Post_Attachment_AttachmentTypeSchema, Post_AttachmentSchema, PostQuerySchema, PostSchema, PostStatusSchema } from "./board_pb";
import { encodeBase64 } from "@pothos/core";
import { makeGoogleProtobufTimestampInput } from "./google/protobuf/timestamp_pothos";
import { makeUserV1UserInput } from "./user_pothos";

/**
 * @generated from enum board.v1.PostStatus
 */
export const BoardV1PostStatusRef = builder.enumType('BoardV1PostStatus', {
  description: undefined,
  values: {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    'UNKNOWN': {
      value: enumFromJson(PostStatusSchema, "UNKNOWN"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: DRAFT = 1;
     */
    'DRAFT': {
      value: enumFromJson(PostStatusSchema, "DRAFT"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: PUBLISHED = 2;
     */
    'PUBLISHED': {
      value: enumFromJson(PostStatusSchema, "PUBLISHED"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: ARCHIVED = 3;
     */
    'ARCHIVED': {
      value: enumFromJson(PostStatusSchema, "ARCHIVED"),
      description: undefined,
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from enum board.v1.Post.Attachment.AttachmentType
 */
export const BoardV1PostAttachment_AttachmentTypeRef = builder.enumType('BoardV1PostAttachment_AttachmentType', {
  description: undefined,
  values: {
    /**
     * @generated from enum value: IMAGE = 0;
     */
    'IMAGE': {
      value: enumFromJson(Post_Attachment_AttachmentTypeSchema, "IMAGE"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: VIDEO = 1;
     */
    'VIDEO': {
      value: enumFromJson(Post_Attachment_AttachmentTypeSchema, "VIDEO"),
      description: undefined,
      deprecated: false,
    },
    /**
     * @generated from enum value: DOCUMENT = 2;
     */
    'DOCUMENT': {
      value: enumFromJson(Post_Attachment_AttachmentTypeSchema, "DOCUMENT"),
      description: undefined,
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from message board.v1.Post
 */
export const BoardV1PostRef = builder.objectRef<Post>('BoardV1Post').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: 'ID',
      nullable: false,
      resolve: (parent) => encodeBase64(\`BoardV1Post:\${parent.id}\`),
      description: undefined,
      deprecationReason: undefined,
    }),
    rawId: t.field({
      type: 'String',
      resolve: (parent) => String(parent.id),
    }),
    /**
     * @generated from field: string title = 2;
     */
    title: t.field({
      type: "String",
      resolve: (parent) => parent.title,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User author = 3;
     */
    author: t.field({
      type: "UserV1User",
      resolve: (parent) => parent.author,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string content = 4;
     */
    content: t.field({
      type: "String",
      resolve: (parent) => parent.content,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt: t.field({
      type: "GoogleProtobufTimestamp",
      resolve: (parent) => parent.createdAt,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: board.v1.PostStatus status = 6;
     */
    status: t.field({
      type: "BoardV1PostStatus",
      resolve: (parent) => enumFromJson(PostStatusSchema, parent.status),
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, int32> view_counts = 7;
     */
    viewCounts: t.field({
      type: ["IntMapEntry"],
      resolve: (parent) => Object.entries(parent.viewCounts).map(([key, value]) => ({ key: String(key), value: value })),
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, board.v1.PostStatus> reaction_statuses = 8;
     */
    reactionStatuses: t.field({
      type: ["String_BoardV1PostStatusMapEntry"],
      resolve: (parent) => Object.entries(parent.reactionStatuses).map(([key, value]) => ({ key: String(key), value: value })),
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: board.v1.Post.Attachment attachment = 9 [deprecated = true];
     * @deprecated
     */
    attachment: t.field({
      type: "BoardV1Post_Attachment",
      resolve: (parent) => parent.attachment,
      description: undefined,
      deprecationReason: "Deprecated. See the comments for more details.",
    }),
    /**
     * @generated from field: map<string, board.v1.Post.Attachment> attachments = 10;
     */
    attachments: t.field({
      type: ["String_BoardV1Post_AttachmentMapEntry"],
      resolve: (parent) => Object.entries(parent.attachments).map(([key, value]) => ({ key: String(key), value: value })),
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message board.v1.Post.Attachment
 */
export const BoardV1Post_AttachmentRef = builder.objectRef<Post_Attachment>('BoardV1Post_Attachment').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: string url = 1;
     */
    url: t.field({
      type: "String",
      resolve: (parent) => parent.url,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string description = 2;
     */
    description: t.field({
      type: "String",
      resolve: (parent) => parent.description,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: board.v1.Post.Attachment.AttachmentType type = 3;
     */
    type: t.field({
      type: "BoardV1PostAttachment_AttachmentType",
      resolve: (parent) => enumFromJson(Post_Attachment_AttachmentTypeSchema, parent.type),
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message board.v1.PostList
 */
export const BoardV1PostListRef = builder.objectRef<PostList>('BoardV1PostList').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: repeated board.v1.Post posts = 1;
     */
    posts: t.field({
      type: ["BoardV1Post"],
      resolve: (parent) => parent.posts,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 total_posts = 2;
     */
    totalPosts: t.field({
      type: "Int",
      resolve: (parent) => parent.totalPosts,
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message board.v1.Comment
 */
export const BoardV1CommentRef = builder.objectRef<Comment>('BoardV1Comment').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: 'ID',
      nullable: false,
      resolve: (parent) => encodeBase64(\`BoardV1Comment:\${parent.id}\`),
      description: undefined,
      deprecationReason: undefined,
    }),
    rawId: t.field({
      type: 'String',
      resolve: (parent) => String(parent.id),
    }),
    /**
     * @generated from field: string post_id = 2;
     */
    postId: t.field({
      type: "String",
      resolve: (parent) => parent.postId,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User author = 3;
     */
    author: t.field({
      type: "UserV1User",
      resolve: (parent) => parent.author,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string content = 4;
     */
    content: t.field({
      type: "String",
      resolve: (parent) => parent.content,
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt: t.field({
      type: "GoogleProtobufTimestamp",
      resolve: (parent) => parent.createdAt,
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from field: map<string, board.v1.PostStatus> reaction_statuses = 8;
 */
export const String_BoardV1PostStatusMapEntryRef = builder.objectRef<{ key: string; value: PostStatus }>('String_BoardV1PostStatusMapEntry').implement({
  description: "Key-value pair for the map field reactionStatuses of board.v1.PostStatus.",
  fields: t => ({
    key: t.exposeString('key', { nullable: false }),
    value: t.expose('value', { type: 'BoardV1PostStatus', nullable: false }),
  }),
});

/**
 * @generated from field: map<string, board.v1.Post.Attachment> attachments = 10;
 */
export const String_BoardV1Post_AttachmentMapEntryRef = builder.objectRef<{ key: string; value: Post_Attachment }>('String_BoardV1Post_AttachmentMapEntry').implement({
  description: "Key-value pair for the map field attachments of board.v1.Post.Attachment.",
  fields: t => ({
    key: t.exposeString('key', { nullable: false }),
    value: t.expose('value', { type: 'BoardV1Post_Attachment', nullable: false }),
  }),
});

/**
 * @generated from message board.v1.PostQuery
 */
export const BoardV1PostQueryInputRef = builder.inputRef<PostQuery>('BoardV1PostQueryInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: string keyword = 1;
     */
    keyword: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 page_number = 2;
     */
    pageNumber: t.field({
      type: "Int",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 results_per_page = 3;
     */
    resultsPerPage: t.field({
      type: "Int",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp start_date = 4;
     */
    startDate: t.field({
      type: "GoogleProtobufTimestampInput",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp end_date = 5;
     */
    endDate: t.field({
      type: "GoogleProtobufTimestampInput",
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message board.v1.Post
 */
export const BoardV1PostInputRef = builder.inputRef<Post>('BoardV1PostInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string title = 2;
     */
    title: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User author = 3;
     */
    author: t.field({
      type: "UserV1UserInput",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string content = 4;
     */
    content: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt: t.field({
      type: "GoogleProtobufTimestampInput",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: board.v1.PostStatus status = 6;
     */
    status: t.field({
      type: "BoardV1PostStatus",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, int32> view_counts = 7;
     */
    viewCounts: t.field({
      type: ["IntMapEntryInput"],
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: map<string, board.v1.PostStatus> reaction_statuses = 8;
     */
    reactionStatuses: t.field({
      type: ["String_BoardV1PostStatusMapEntryInput"],
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: board.v1.Post.Attachment attachment = 9 [deprecated = true];
     * @deprecated
     */
    attachment: t.field({
      type: "BoardV1Post_AttachmentInput",
      description: undefined,
      deprecationReason: "Deprecated. See the comments for more details.",
    }),
    /**
     * @generated from field: map<string, board.v1.Post.Attachment> attachments = 10;
     */
    attachments: t.field({
      type: ["String_BoardV1Post_AttachmentMapEntryInput"],
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message board.v1.Post.Attachment
 */
export const BoardV1Post_AttachmentInputRef = builder.inputRef<Post_Attachment>('BoardV1Post_AttachmentInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: string url = 1;
     */
    url: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string description = 2;
     */
    description: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: board.v1.Post.Attachment.AttachmentType type = 3;
     */
    type: t.field({
      type: "BoardV1PostAttachment_AttachmentType",
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message board.v1.Comment
 */
export const BoardV1CommentInputRef = builder.inputRef<Comment>('BoardV1CommentInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string post_id = 2;
     */
    postId: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: user.v1.User author = 3;
     */
    author: t.field({
      type: "UserV1UserInput",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: string content = 4;
     */
    content: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt: t.field({
      type: "GoogleProtobufTimestampInput",
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from field: map<string, board.v1.PostStatus> reaction_statuses = 8;
 */
export const String_BoardV1PostStatusMapEntryInputRef = builder.inputRef<{ key: string; value: PostStatus }>('String_BoardV1PostStatusMapEntryInput').implement({
  description: "Key-value pair for the map field reactionStatuses of board.v1.PostStatus.",
  fields: t => ({
    key: t.string({ required: true }),
    value: t.field({ type: 'BoardV1PostStatus', required: true }),
  }),
});

/**
 * @generated from field: map<string, board.v1.Post.Attachment> attachments = 10;
 */
export const String_BoardV1Post_AttachmentMapEntryInputRef = builder.inputRef<{ key: string; value: Post_Attachment }>('String_BoardV1Post_AttachmentMapEntryInput').implement({
  description: "Key-value pair for the map field attachments of board.v1.Post.Attachment.",
  fields: t => ({
    key: t.string({ required: true }),
    value: t.field({ type: 'BoardV1Post_AttachmentInput', required: true }),
  }),
});

/**
 * A function to make a board.v1.PostQuery input
 */
export function makeBoardV1PostQueryInput(input: any): PostQuery {
  return create(PostQuerySchema, {
    /**
     * @generated from field: string keyword = 1;
     */
    keyword: input?.keyword,
    /**
     * @generated from field: int32 page_number = 2;
     */
    pageNumber: input?.pageNumber,
    /**
     * @generated from field: int32 results_per_page = 3;
     */
    resultsPerPage: input?.resultsPerPage,
    /**
     * @generated from field: google.protobuf.Timestamp start_date = 4;
     */
    startDate: input?.startDate ? makeGoogleProtobufTimestampInput(input.startDate) : null,
    /**
     * @generated from field: google.protobuf.Timestamp end_date = 5;
     */
    endDate: input?.endDate ? makeGoogleProtobufTimestampInput(input.endDate) : null,
  });
}

/**
 * A function to make a board.v1.Post input
 */
export function makeBoardV1PostInput(input: any): Post {
  return create(PostSchema, {
    /**
     * @generated from field: string id = 1;
     */
    id: input?.id,
    /**
     * @generated from field: string title = 2;
     */
    title: input?.title,
    /**
     * @generated from field: user.v1.User author = 3;
     */
    author: input?.author ? makeUserV1UserInput(input.author) : null,
    /**
     * @generated from field: string content = 4;
     */
    content: input?.content,
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt: input?.createdAt ? makeGoogleProtobufTimestampInput(input.createdAt) : null,
    /**
     * @generated from field: board.v1.PostStatus status = 6;
     */
    status: input?.status,
    /**
     * @generated from field: map<string, int32> view_counts = 7;
     */
    viewCounts: input?.viewCounts ? Object.fromEntries(input?.viewCounts?.map(({ key, value }) => [key, value])) : null,
    /**
     * @generated from field: map<string, board.v1.PostStatus> reaction_statuses = 8;
     */
    reactionStatuses: input?.reactionStatuses ? Object.fromEntries(input?.reactionStatuses?.map(({ key, value }) => [key, value])) : null,
    /**
     * @generated from field: board.v1.Post.Attachment attachment = 9 [deprecated = true];
     * @deprecated
     */
    attachment: input?.attachment ? makeBoardV1Post_AttachmentInput(input.attachment) : null,
    /**
     * @generated from field: map<string, board.v1.Post.Attachment> attachments = 10;
     */
    attachments: input?.attachments ? Object.fromEntries(input?.attachments?.map(({ key, value }) => [key, makeBoardV1Post_AttachmentInput(value)])) : null,
  });
}

/**
 * A function to make a board.v1.Post.Attachment input
 */
export function makeBoardV1Post_AttachmentInput(input: any): Post_Attachment {
  return create(Post_AttachmentSchema, {
    /**
     * @generated from field: string url = 1;
     */
    url: input?.url,
    /**
     * @generated from field: string description = 2;
     */
    description: input?.description,
    /**
     * @generated from field: board.v1.Post.Attachment.AttachmentType type = 3;
     */
    type: input?.type,
  });
}

/**
 * A function to make a board.v1.Comment input
 */
export function makeBoardV1CommentInput(input: any): Comment {
  return create(CommentSchema, {
    /**
     * @generated from field: string id = 1;
     */
    id: input?.id,
    /**
     * @generated from field: string post_id = 2;
     */
    postId: input?.postId,
    /**
     * @generated from field: user.v1.User author = 3;
     */
    author: input?.author ? makeUserV1UserInput(input.author) : null,
    /**
     * @generated from field: string content = 4;
     */
    content: input?.content,
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt: input?.createdAt ? makeGoogleProtobufTimestampInput(input.createdAt) : null,
  });
}

/**
 * @generated from rpc board.v1.BoardService.GetPost
 */
builder.queryField('boardV1BoardServiceGetPost', t => t.field({
  /**
   * @generated from message board.v1.Post
   */
  type: "BoardV1Post",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message google.protobuf.Empty
     */
    input: t.arg({
      type: "GoogleProtobufEmptyInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.boardV1BoardService) throw new Error('boardV1BoardService is not provided.');
    return context.boardV1BoardService.getPost(
      makeGoogleProtobufEmptyInput(input),
      { headers: context.boardV1BoardServiceRequestHeaders },
    );
  },
}));

/**
 * @generated from rpc board.v1.BoardService.ListPosts
 */
builder.queryField('boardV1BoardServiceListPosts', t => t.field({
  /**
   * @generated from message board.v1.PostList
   */
  type: "BoardV1PostList",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message board.v1.PostQuery
     */
    input: t.arg({
      type: "BoardV1PostQueryInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.boardV1BoardService) throw new Error('boardV1BoardService is not provided.');
    return context.boardV1BoardService.listPosts(
      makeBoardV1PostQueryInput(input),
      { headers: context.boardV1BoardServiceRequestHeaders },
    );
  },
}));

/**
 * @generated from rpc board.v1.BoardService.CreatePost
 */
builder.mutationField('boardV1BoardServiceCreatePost', t => t.field({
  /**
   * @generated from message board.v1.Post
   */
  type: "BoardV1Post",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message board.v1.Post
     */
    input: t.arg({
      type: "BoardV1PostInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.boardV1BoardService) throw new Error('boardV1BoardService is not provided.');
    return context.boardV1BoardService.createPost(
      makeBoardV1PostInput(input),
      { headers: context.boardV1BoardServiceRequestHeaders },
    );
  },
}));

/**
 * @generated from rpc board.v1.BoardService.DeletePost
 */
builder.mutationField('boardV1BoardServiceDeletePost', t => t.field({
  /**
   * @generated from message google.protobuf.Empty
   */
  type: "GoogleProtobufEmpty",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message board.v1.Post
     */
    input: t.arg({
      type: "BoardV1PostInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.boardV1BoardService) throw new Error('boardV1BoardService is not provided.');
    return context.boardV1BoardService.deletePost(
      makeBoardV1PostInput(input),
      { headers: context.boardV1BoardServiceRequestHeaders },
    );
  },
}));

/**
 * @generated from rpc board.v1.BoardService.AddComment
 */
builder.mutationField('boardV1BoardServiceAddComment', t => t.field({
  /**
   * @generated from message board.v1.Comment
   */
  type: "BoardV1Comment",
  description: undefined,
  deprecationReason: undefined,
  args: {
    /**
     * @generated from message board.v1.Comment
     */
    input: t.arg({
      type: "BoardV1CommentInput",
      required: true,
      description: undefined,
    }),
  },
  resolve: (_root, { input }, context) => {
    if (!context.boardV1BoardService) throw new Error('boardV1BoardService is not provided.');
    return context.boardV1BoardService.addComment(
      makeBoardV1CommentInput(input),
      { headers: context.boardV1BoardServiceRequestHeaders },
    );
  },
}));

",
    "name": "board_pothos.ts",
  },
  {
    "content": "// @generated by pothos-protoc-gen v0.1.1 with parameter "builder_path=../builder"
// @generated from file google/protobuf/timestamp.proto (package google.protobuf, syntax proto3)
/* eslint-disable */

import { builder } from "../../../builder";
import type { Timestamp } from "./timestamp_pb";
import { TimestampSchema } from "./timestamp_pb";
import { create } from "@bufbuild/protobuf";

/**
 * @generated from message google.protobuf.Timestamp
 */
export const GoogleProtobufTimestampRef = builder.objectRef<Timestamp>('GoogleProtobufTimestamp').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: int64 seconds = 1;
     */
    seconds: t.field({
      type: "String",
      resolve: (parent) => (parent.seconds)?.toString(),
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 nanos = 2;
     */
    nanos: t.field({
      type: "Int",
      resolve: (parent) => parent.nanos,
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * @generated from message google.protobuf.Timestamp
 */
export const GoogleProtobufTimestampInputRef = builder.inputRef<Timestamp>('GoogleProtobufTimestampInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
    /**
     * @generated from field: int64 seconds = 1;
     */
    seconds: t.field({
      type: "String",
      description: undefined,
      deprecationReason: undefined,
    }),
    /**
     * @generated from field: int32 nanos = 2;
     */
    nanos: t.field({
      type: "Int",
      description: undefined,
      deprecationReason: undefined,
    }),
  }),
});

/**
 * A function to make a google.protobuf.Timestamp input
 */
export function makeGoogleProtobufTimestampInput(input: any): Timestamp {
  return create(TimestampSchema, {
    /**
     * @generated from field: int64 seconds = 1;
     */
    seconds: input?.seconds,
    /**
     * @generated from field: int32 nanos = 2;
     */
    nanos: input?.nanos,
  });
}

",
    "name": "google/protobuf/timestamp_pothos.ts",
  },
  {
    "content": "// @generated by pothos-protoc-gen v0.1.1 with parameter "builder_path=../builder"
// @generated from file google/protobuf/empty.proto (package google.protobuf, syntax proto3)
/* eslint-disable */

import { builder } from "../../../builder";
import type { Empty } from "./empty_pb";
import { EmptySchema } from "./empty_pb";
import { create } from "@bufbuild/protobuf";

/**
 * @generated from message google.protobuf.Empty
 */
export const GoogleProtobufEmptyRef = builder.objectRef<Empty>('GoogleProtobufEmpty').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
  }),
});

/**
 * @generated from message google.protobuf.Empty
 */
export const GoogleProtobufEmptyInputRef = builder.inputRef<Empty>('GoogleProtobufEmptyInput').implement({
  description: undefined,
  deprecationReason: undefined,
  fields: t => ({
    _: t.boolean({ description: 'Fake field because GraphQL does not support empty input. Do not use, It does nothing.' }),
  }),
});

/**
 * A function to make a google.protobuf.Empty input
 */
export function makeGoogleProtobufEmptyInput(input: any): Empty {
  return create(EmptySchema, {
  });
}

",
    "name": "google/protobuf/empty_pothos.ts",
  },
  {
    "content": "import { builder } from "../builder";

/**
 * @generated from field: map<string, int32> view_counts = 7;
 */
export const IntMapEntryRef = builder.objectRef<{ key: string; value: number }>('IntMapEntry').implement({
  description: "Key-value pair for the map field viewCounts of INT32.",
  fields: t => ({
    key: t.exposeString('key', { nullable: false }),
    value: t.expose('value', { type: 'Int', nullable: false }),
  }),
});

/**
 * @generated from field: map<string, int32> view_counts = 7;
 */
export const IntMapEntryInputRef = builder.inputRef<{ key: string; value: number }>('IntMapEntryInput').implement({
  description: "Key-value pair for the map field viewCounts of INT32.",
  fields: t => ({
    key: t.string({ required: true }),
    value: t.field({ type: 'Int', required: true }),
  }),
});

",
    "name": "generated-map-entries.ts",
  },
  {
    "content": "import type { Client } from "@connectrpc/connect";
import type { UserService } from "./user_pb";
import type { BoardService } from "./board_pb";

export * from './user_pothos';
export * from './board_pothos';
export * from './google/protobuf/empty_pothos';
export * from './google/protobuf/timestamp_pothos';
export * from './generated-map-entries';
export interface GeneratedPothosContext {
  userV1UserService: Client<typeof UserService>;
  userV1UserServiceRequestHeaders?: HeadersInit;
  boardV1BoardService: Client<typeof BoardService>;
  boardV1BoardServiceRequestHeaders?: HeadersInit;
}
",
    "name": "generated-pothos.ts",
  },
]
`;
