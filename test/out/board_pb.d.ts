// @generated by protoc-gen-es v2.2.5
// @generated from file board.proto (package board.v1, syntax proto3)
/* eslint-disable */

import type { Message } from '@bufbuild/protobuf';
import type {
  GenEnum,
  GenFile,
  GenMessage,
  GenService,
} from '@bufbuild/protobuf/codegenv1';
import type { EmptySchema } from './google/protobuf/empty_pb';
import type { Timestamp } from './google/protobuf/timestamp_pb';
import type { User } from './user_pb';

/**
 * Describes the file board.proto.
 */
export declare const file_board: GenFile;

/**
 * Message representing a post on the board.
 *
 * @generated from message board.v1.Post
 */
export declare type Post = Message<'board.v1.Post'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Author information imported from user.v1 package
   *
   * @generated from field: user.v1.User author = 3;
   */
  author?: User;

  /**
   * @generated from field: string content = 4;
   */
  content: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: board.v1.PostStatus status = 6;
   */
  status: PostStatus;

  /**
   * Map field with scalar value type.
   * Maps tag names to view counts.
   *
   * @generated from field: map<string, int32> view_counts = 7;
   */
  viewCounts: { [key: string]: number };

  /**
   * Map field with enum value type.
   * Maps reaction types to post status (e.g., indicating mood or context).
   *
   * @generated from field: map<string, board.v1.PostStatus> reaction_statuses = 8;
   */
  reactionStatuses: { [key: string]: PostStatus };

  /**
   * Address field with message value type.
   *
   * Deprecated field, should not be used in new code.
   *
   * @generated from field: board.v1.Post.Attachment attachment = 9 [deprecated = true];
   * @deprecated
   */
  attachment?: Post_Attachment;

  /**
   * Map field with message value type.
   * Maps attachment IDs to attachment details.
   *
   * @generated from field: map<string, board.v1.Post.Attachment> attachments = 10;
   */
  attachments: { [key: string]: Post_Attachment };
};

/**
 * Describes the message board.v1.Post.
 * Use `create(PostSchema)` to create a new message.
 */
export declare const PostSchema: GenMessage<Post>;

/**
 * Nested message representing an attachment to the post.
 *
 * @generated from message board.v1.Post.Attachment
 */
export declare type Post_Attachment = Message<'board.v1.Post.Attachment'> & {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: board.v1.Post.Attachment.AttachmentType type = 3;
   */
  type: Post_Attachment_AttachmentType;
};

/**
 * Describes the message board.v1.Post.Attachment.
 * Use `create(Post_AttachmentSchema)` to create a new message.
 */
export declare const Post_AttachmentSchema: GenMessage<Post_Attachment>;

/**
 * Nested enum for attachment type.
 *
 * @generated from enum board.v1.Post.Attachment.AttachmentType
 */
export enum Post_Attachment_AttachmentType {
  /**
   * @generated from enum value: IMAGE = 0;
   */
  IMAGE = 0,

  /**
   * @generated from enum value: VIDEO = 1;
   */
  VIDEO = 1,

  /**
   * @generated from enum value: DOCUMENT = 2;
   */
  DOCUMENT = 2,
}

/**
 * Describes the enum board.v1.Post.Attachment.AttachmentType.
 */
export declare const Post_Attachment_AttachmentTypeSchema: GenEnum<Post_Attachment_AttachmentType>;

/**
 * Message representing a comment on a post.
 *
 * @generated from message board.v1.Comment
 */
export declare type Comment = Message<'board.v1.Comment'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Reference to the post this comment belongs to.
   *
   * @generated from field: string post_id = 2;
   */
  postId: string;

  /**
   * Author information imported from user.v1 package
   *
   * @generated from field: user.v1.User author = 3;
   */
  author?: User;

  /**
   * @generated from field: string content = 4;
   */
  content: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;
};

/**
 * Describes the message board.v1.Comment.
 * Use `create(CommentSchema)` to create a new message.
 */
export declare const CommentSchema: GenMessage<Comment>;

/**
 * Message for querying posts.
 *
 * @generated from message board.v1.PostQuery
 */
export declare type PostQuery = Message<'board.v1.PostQuery'> & {
  /**
   * @generated from field: string keyword = 1;
   */
  keyword: string;

  /**
   * @generated from field: int32 page_number = 2;
   */
  pageNumber: number;

  /**
   * @generated from field: int32 results_per_page = 3;
   */
  resultsPerPage: number;

  /**
   * @generated from field: google.protobuf.Timestamp start_date = 4;
   */
  startDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_date = 5;
   */
  endDate?: Timestamp;
};

/**
 * Describes the message board.v1.PostQuery.
 * Use `create(PostQuerySchema)` to create a new message.
 */
export declare const PostQuerySchema: GenMessage<PostQuery>;

/**
 * Message representing a list of posts.
 *
 * @generated from message board.v1.PostList
 */
export declare type PostList = Message<'board.v1.PostList'> & {
  /**
   * @generated from field: repeated board.v1.Post posts = 1;
   */
  posts: Post[];

  /**
   * @generated from field: int32 total_posts = 2;
   */
  totalPosts: number;
};

/**
 * Describes the message board.v1.PostList.
 * Use `create(PostListSchema)` to create a new message.
 */
export declare const PostListSchema: GenMessage<PostList>;

/**
 * Top-level enum representing the status of a post.
 *
 * @generated from enum board.v1.PostStatus
 */
export enum PostStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: DRAFT = 1;
   */
  DRAFT = 1,

  /**
   * @generated from enum value: PUBLISHED = 2;
   */
  PUBLISHED = 2,

  /**
   * @generated from enum value: ARCHIVED = 3;
   */
  ARCHIVED = 3,
}

/**
 * Describes the enum board.v1.PostStatus.
 */
export declare const PostStatusSchema: GenEnum<PostStatus>;

/**
 * Service for board operations.
 *
 * @generated from service board.v1.BoardService
 */
export declare const BoardService: GenService<{
  /**
   * Retrieves a single post.
   *
   * @generated from rpc board.v1.BoardService.GetPost
   */
  getPost: {
    methodKind: 'unary';
    input: typeof EmptySchema;
    output: typeof PostSchema;
  };
  /**
   * Retrieves a list of posts based on query parameters.
   *
   * @generated from rpc board.v1.BoardService.ListPosts
   */
  listPosts: {
    methodKind: 'unary';
    input: typeof PostQuerySchema;
    output: typeof PostListSchema;
  };
  /**
   * Creates a new post.
   *
   * @generated from rpc board.v1.BoardService.CreatePost
   */
  createPost: {
    methodKind: 'unary';
    input: typeof PostSchema;
    output: typeof PostSchema;
  };
  /**
   * Deletes a post.
   *
   * @generated from rpc board.v1.BoardService.DeletePost
   */
  deletePost: {
    methodKind: 'unary';
    input: typeof PostSchema;
    output: typeof EmptySchema;
  };
  /**
   * Adds a comment to a post.
   *
   * @generated from rpc board.v1.BoardService.AddComment
   */
  addComment: {
    methodKind: 'unary';
    input: typeof CommentSchema;
    output: typeof CommentSchema;
  };
}>;
