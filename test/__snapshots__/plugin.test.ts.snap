// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Generate files > basic-plugin-run 1`] = `
[
  {
    "content": "// @generated by pothos-protoc-gen v0.0.3 with parameter "builder_path=../builder"
// @generated from file user.proto (package user.v1, syntax proto3)
/* eslint-disable */

import { builder } from "../builder";
import { enumFromJson } from "@bufbuild/protobuf";
import type { CreateUserResponse, DeleteUserResponse, GetUserResponse, ListUsersResponse, UpdateUserResponse, User } from "./user_pb";
import { User_UserStatusSchema, UserRoleSchema } from "./user_pb";

/**
 * @generated from enum user.v1.UserRole
 */
export const UserV1UserRoleRef = builder.enumType('UserV1UserRole', {
  description: "",
  values: {
    /**
     * @generated from enum value: ROLE_UNSPECIFIED = 0;
     */
    'ROLE_UNSPECIFIED': {
      value: enumFromJson(UserRoleSchema, "ROLE_UNSPECIFIED"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_ADMIN = 1;
     */
    'ROLE_ADMIN': {
      value: enumFromJson(UserRoleSchema, "ROLE_ADMIN"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_USER = 2;
     */
    'ROLE_USER': {
      value: enumFromJson(UserRoleSchema, "ROLE_USER"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_GUEST = 3;
     */
    'ROLE_GUEST': {
      value: enumFromJson(UserRoleSchema, "ROLE_GUEST"),
      description: "",
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from enum user.v1.User.UserStatus
 */
export const UserV1User_UserStatusRef = builder.enumType('UserV1User_UserStatus', {
  description: "",
  values: {
    /**
     * @generated from enum value: STATUS_UNSPECIFIED = 0;
     */
    'STATUS_UNSPECIFIED': {
      value: enumFromJson(User_UserStatusSchema, "STATUS_UNSPECIFIED"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: STATUS_ACTIVE = 1;
     */
    'STATUS_ACTIVE': {
      value: enumFromJson(User_UserStatusSchema, "STATUS_ACTIVE"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: STATUS_INACTIVE = 2;
     */
    'STATUS_INACTIVE': {
      value: enumFromJson(User_UserStatusSchema, "STATUS_INACTIVE"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: STATUS_SUSPENDED = 3;
     */
    'STATUS_SUSPENDED': {
      value: enumFromJson(User_UserStatusSchema, "STATUS_SUSPENDED"),
      description: "",
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from message user.v1.CreateUserResponse
 */
export const UserV1CreateUserResponseRef = builder.objectRef<CreateUserResponse>('UserV1CreateUserResponse').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: user.v1.User user = 1;
     */
    user: t.field({
      type: "UserV1User",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.user,
    }),
  }),
});

/**
 * @generated from message user.v1.User
 */
export const UserV1UserRef = builder.objectRef<User>('UserV1User').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.id,
    }),
    /**
     * @generated from field: string name = 2;
     */
    name: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.name,
    }),
    /**
     * @generated from field: string email = 3;
     */
    email: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.email,
    }),
    /**
     * @generated from field: user.v1.UserRole role = 4;
     */
    role: t.field({
      type: "UserV1UserRole",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => enumFromJson(UserRoleSchema, parent.role),
    }),
    /**
     * @generated from field: user.v1.User.UserStatus status = 5;
     */
    status: t.field({
      type: "UserV1User_UserStatus",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => enumFromJson(User_UserStatusSchema, parent.status),
    }),
    /**
     * @generated from field: map<string, string> metadata = 6;
     */
    metadata: t.field({
      type: ["StringMapEntry"],
      description: "",
      deprecatedReason: "",
      resolve: (parent) => Object.entries(parent.metadata).map(([key, value]) => ({ key: String(key), value: value })),
    }),
    /**
     * @generated from field: repeated string tags = 7;
     */
    tags: t.field({
      type: ["String"],
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.tags,
    }),
    /**
     * @generated from field: int64 created_at = 8;
     */
    createdAt: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => (parent.createdAt)?.toString(),
    }),
    /**
     * @generated from field: int64 updated_at = 9;
     */
    updatedAt: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => (parent.updatedAt)?.toString(),
    }),
  }),
});

/**
 * @generated from message user.v1.GetUserResponse
 */
export const UserV1GetUserResponseRef = builder.objectRef<GetUserResponse>('UserV1GetUserResponse').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: user.v1.User user = 1;
     */
    user: t.field({
      type: "UserV1User",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.user,
    }),
  }),
});

/**
 * @generated from message user.v1.UpdateUserResponse
 */
export const UserV1UpdateUserResponseRef = builder.objectRef<UpdateUserResponse>('UserV1UpdateUserResponse').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: user.v1.User user = 1;
     */
    user: t.field({
      type: "UserV1User",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.user,
    }),
  }),
});

/**
 * @generated from message user.v1.DeleteUserResponse
 */
export const UserV1DeleteUserResponseRef = builder.objectRef<DeleteUserResponse>('UserV1DeleteUserResponse').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: bool success = 1;
     */
    success: t.field({
      type: "Boolean",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.success,
    }),
  }),
});

/**
 * @generated from message user.v1.ListUsersResponse
 */
export const UserV1ListUsersResponseRef = builder.objectRef<ListUsersResponse>('UserV1ListUsersResponse').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: repeated user.v1.User users = 1;
     */
    users: t.field({
      type: ["UserV1User"],
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.users,
    }),
    /**
     * @generated from field: string next_page_token = 2;
     */
    nextPageToken: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.nextPageToken,
    }),
    /**
     * @generated from field: int32 total_count = 3;
     */
    totalCount: t.field({
      type: "Int",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.totalCount,
    }),
  }),
});

",
    "name": "user_pothos.ts",
  },
  {
    "content": "// @generated by pothos-protoc-gen v0.0.3 with parameter "builder_path=../builder"
// @generated from file post/post.proto (package post.v1, syntax proto3)
/* eslint-disable */

import { builder } from "../../builder";
import { enumFromJson } from "@bufbuild/protobuf";
import type { ListPostsResponse, Post, PostWithAuthor } from "./post_pb";
import { PostCategorySchema, PostListFilterSchema, PostStatusSchema } from "./post_pb";

/**
 * @generated from enum post.v1.PostStatus
 */
export const PostV1PostStatusRef = builder.enumType('PostV1PostStatus', {
  description: "",
  values: {
    /**
     * @generated from enum value: POST_STATUS_UNSPECIFIED = 0;
     */
    'UNSPECIFIED': {
      value: enumFromJson(PostStatusSchema, "POST_STATUS_UNSPECIFIED"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_STATUS_DRAFT = 1;
     */
    'DRAFT': {
      value: enumFromJson(PostStatusSchema, "POST_STATUS_DRAFT"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_STATUS_PUBLISHED = 2;
     */
    'PUBLISHED': {
      value: enumFromJson(PostStatusSchema, "POST_STATUS_PUBLISHED"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_STATUS_ARCHIVED = 3;
     */
    'ARCHIVED': {
      value: enumFromJson(PostStatusSchema, "POST_STATUS_ARCHIVED"),
      description: "",
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from enum post.v1.PostCategory
 */
export const PostV1PostCategoryRef = builder.enumType('PostV1PostCategory', {
  description: "",
  values: {
    /**
     * @generated from enum value: POST_CATEGORY_UNSPECIFIED = 0;
     */
    'UNSPECIFIED': {
      value: enumFromJson(PostCategorySchema, "POST_CATEGORY_UNSPECIFIED"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_TECHNOLOGY = 1;
     */
    'TECHNOLOGY': {
      value: enumFromJson(PostCategorySchema, "POST_CATEGORY_TECHNOLOGY"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_HEALTH = 2;
     */
    'HEALTH': {
      value: enumFromJson(PostCategorySchema, "POST_CATEGORY_HEALTH"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_TRAVEL = 3;
     */
    'TRAVEL': {
      value: enumFromJson(PostCategorySchema, "POST_CATEGORY_TRAVEL"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_FOOD = 4;
     */
    'FOOD': {
      value: enumFromJson(PostCategorySchema, "POST_CATEGORY_FOOD"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_LIFESTYLE = 5;
     */
    'LIFESTYLE': {
      value: enumFromJson(PostCategorySchema, "POST_CATEGORY_LIFESTYLE"),
      description: "",
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from enum post.v1.PostListFilter
 */
export const PostV1PostListFilterRef = builder.enumType('PostV1PostListFilter', {
  description: "",
  values: {
    /**
     * @generated from enum value: POST_LIST_FILTER_ALL = 0;
     */
    'ALL': {
      value: enumFromJson(PostListFilterSchema, "POST_LIST_FILTER_ALL"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_LIST_FILTER_PUBLISHED = 1;
     */
    'PUBLISHED': {
      value: enumFromJson(PostListFilterSchema, "POST_LIST_FILTER_PUBLISHED"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_LIST_FILTER_DRAFTS = 2;
     */
    'DRAFTS': {
      value: enumFromJson(PostListFilterSchema, "POST_LIST_FILTER_DRAFTS"),
      description: "",
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_LIST_FILTER_ARCHIVED = 3;
     */
    'ARCHIVED': {
      value: enumFromJson(PostListFilterSchema, "POST_LIST_FILTER_ARCHIVED"),
      description: "",
      deprecated: false,
    },
  } as const,
});

/**
 * @generated from message post.v1.Post
 */
export const PostV1PostRef = builder.objectRef<Post>('PostV1Post').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.id,
    }),
    /**
     * @generated from field: string title = 2;
     */
    title: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.title,
    }),
    /**
     * @generated from field: string content = 3;
     */
    content: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.content,
    }),
    /**
     * @generated from field: post.v1.PostStatus status = 4;
     */
    status: t.field({
      type: "PostV1PostStatus",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => enumFromJson(PostStatusSchema, parent.status),
    }),
    /**
     * @generated from field: post.v1.PostCategory category = 5;
     */
    category: t.field({
      type: "PostV1PostCategory",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => enumFromJson(PostCategorySchema, parent.category),
    }),
    /**
     * @generated from field: string author_id = 6;
     */
    authorId: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.authorId,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 7;
     */
    createdAt: t.field({
      type: "GoogleProtobufTimestamp",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.createdAt,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp updated_at = 8;
     */
    updatedAt: t.field({
      type: "GoogleProtobufTimestamp",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.updatedAt,
    }),
    /**
     * @generated from field: map<string, string> metadata = 9 [deprecated = true];
     * @deprecated
     */
    metadata: t.field({
      type: ["StringMapEntry"],
      description: "",
      deprecatedReason: "",
      resolve: (parent) => Object.entries(parent.metadata).map(([key, value]) => ({ key: String(key), value: value })),
    }),
    /**
     * @generated from field: repeated string tags = 10;
     */
    tags: t.field({
      type: ["String"],
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.tags,
    }),
  }),
});

/**
 * @generated from message post.v1.ListPostsResponse
 */
export const PostV1ListPostsResponseRef = builder.objectRef<ListPostsResponse>('PostV1ListPostsResponse').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: repeated post.v1.Post posts = 1;
     */
    posts: t.field({
      type: ["PostV1Post"],
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.posts,
    }),
    /**
     * @generated from field: string next_page_token = 2;
     */
    nextPageToken: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.nextPageToken,
    }),
    /**
     * @generated from field: int32 total_count = 3;
     */
    totalCount: t.field({
      type: "Int",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.totalCount,
    }),
  }),
});

/**
 * @generated from message post.v1.PostWithAuthor
 */
export const PostV1PostWithAuthorRef = builder.objectRef<PostWithAuthor>('PostV1PostWithAuthor').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: post.v1.Post post = 1;
     */
    post: t.field({
      type: "PostV1Post",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.post,
    }),
    /**
     * @generated from field: user.v1.User author = 2;
     */
    author: t.field({
      type: "UserV1User",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.author,
    }),
  }),
});

",
    "name": "post/post_pothos.ts",
  },
  {
    "content": "// @generated by pothos-protoc-gen v0.0.3 with parameter "builder_path=../builder"
// @generated from file google/protobuf/timestamp.proto (package google.protobuf, syntax proto3)
/* eslint-disable */

import { builder } from "../../../builder";
import type { Timestamp } from "./timestamp_pb";

/**
 * @generated from message google.protobuf.Timestamp
 */
export const GoogleProtobufTimestampRef = builder.objectRef<Timestamp>('GoogleProtobufTimestamp').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
    /**
     * @generated from field: int64 seconds = 1;
     */
    seconds: t.field({
      type: "String",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => (parent.seconds)?.toString(),
    }),
    /**
     * @generated from field: int32 nanos = 2;
     */
    nanos: t.field({
      type: "Int",
      description: "",
      deprecatedReason: "",
      resolve: (parent) => parent.nanos,
    }),
  }),
});

",
    "name": "google/protobuf/timestamp_pothos.ts",
  },
  {
    "content": "// @generated by pothos-protoc-gen v0.0.3 with parameter "builder_path=../builder"
// @generated from file google/protobuf/empty.proto (package google.protobuf, syntax proto3)
/* eslint-disable */

import { builder } from "../../../builder";
import type { Empty } from "./empty_pb";

/**
 * @generated from message google.protobuf.Empty
 */
export const GoogleProtobufEmptyRef = builder.objectRef<Empty>('GoogleProtobufEmpty').implement({
  description: "",
  fields: t => ({
    _: t.boolean({ resolve: () => false, description: 'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.' }),
  }),
});

",
    "name": "google/protobuf/empty_pothos.ts",
  },
]
`;
