"""Message representing a comment on a post."""
type BoardV1Comment {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean

  """Author information imported from user.v1 package"""
  author: UserV1User
  content: String
  createdAt: GoogleProtobufTimestamp
  id: ID!

  """Reference to the post this comment belongs to."""
  postId: String
  rawId: String
}

"""Message representing a comment on a post."""
input BoardV1CommentInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean

  """Author information imported from user.v1 package"""
  author: UserV1UserInput
  content: String
  createdAt: GoogleProtobufTimestampInput
  id: String

  """Reference to the post this comment belongs to."""
  postId: String
}

"""Message representing a post on the board."""
type BoardV1Post {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean

  """
  Address field with message value type.
  
  
   Deprecated field, should not be used in new code.
  """
  attachment: BoardV1Post_Attachment @deprecated(reason: "Deprecated. See the comments for more details.")

  """
  Map field with message value type.
   Maps attachment IDs to attachment details.
  """
  attachments: [String_BoardV1Post_AttachmentMapEntry!]

  """Author information imported from user.v1 package"""
  author: UserV1User
  content: String
  createdAt: GoogleProtobufTimestamp
  id: ID!
  rawId: String

  """
  Map field with enum value type.
   Maps reaction types to post status (e.g., indicating mood or context).
  """
  reactionStatuses: [String_BoardV1PostStatusMapEntry!]
  status: BoardV1PostStatus
  title: String

  """
  Map field with scalar value type.
   Maps tag names to view counts.
  """
  viewCounts: [IntMapEntry!]
}

"""Nested enum for attachment type."""
enum BoardV1PostAttachment_AttachmentType {
  DOCUMENT
  IMAGE
  VIDEO
}

"""Message representing a post on the board."""
input BoardV1PostInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean

  """
  Address field with message value type.
  
  
   Deprecated field, should not be used in new code.
  """
  attachment: BoardV1Post_AttachmentInput @deprecated(reason: "Deprecated. See the comments for more details.")

  """
  Map field with message value type.
   Maps attachment IDs to attachment details.
  """
  attachments: [String_BoardV1Post_AttachmentMapEntryInput!]

  """Author information imported from user.v1 package"""
  author: UserV1UserInput
  content: String
  createdAt: GoogleProtobufTimestampInput
  id: String

  """
  Map field with enum value type.
   Maps reaction types to post status (e.g., indicating mood or context).
  """
  reactionStatuses: [String_BoardV1PostStatusMapEntryInput!]
  status: BoardV1PostStatus
  title: String

  """
  Map field with scalar value type.
   Maps tag names to view counts.
  """
  viewCounts: [IntMapEntryInput!]
}

"""Message representing a list of posts."""
type BoardV1PostList {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean
  posts: [BoardV1Post!]
  totalPosts: Int
}

"""Message for querying posts."""
input BoardV1PostQueryInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean
  endDate: GoogleProtobufTimestampInput
  keyword: String
  pageNumber: Int
  resultsPerPage: Int
  startDate: GoogleProtobufTimestampInput
}

"""Top-level enum representing the status of a post."""
enum BoardV1PostStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
  UNKNOWN
}

"""Nested message representing an attachment to the post."""
type BoardV1Post_Attachment {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean
  description: String
  type: BoardV1PostAttachment_AttachmentType
  url: String
}

"""Nested message representing an attachment to the post."""
input BoardV1Post_AttachmentInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean
  description: String
  type: BoardV1PostAttachment_AttachmentType
  url: String
}

"""
A generic empty message that you can re-use to avoid defining duplicated
 empty messages in your APIs. A typical example is to use it as the request
 or the response type of an API method. For instance:

     service Foo {
       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
     }
"""
type GoogleProtobufEmpty {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean
}

"""
A generic empty message that you can re-use to avoid defining duplicated
 empty messages in your APIs. A typical example is to use it as the request
 or the response type of an API method. For instance:

     service Foo {
       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
     }
"""
input GoogleProtobufEmptyInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean
}

"""
A Timestamp represents a point in time independent of any time zone or local
 calendar, encoded as a count of seconds and fractions of seconds at
 nanosecond resolution. The count is relative to an epoch at UTC midnight on
 January 1, 1970, in the proleptic Gregorian calendar which extends the
 Gregorian calendar backwards to year one.

 All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 second table is needed for interpretation, using a [24-hour linear
 smear](https://developers.google.com/time/smear).

 The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 restricting to that range, we ensure that we can convert to and from [RFC
 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

 # Examples

 Example 1: Compute Timestamp from POSIX `time()`.

     Timestamp timestamp;
     timestamp.set_seconds(time(NULL));
     timestamp.set_nanos(0);

 Example 2: Compute Timestamp from POSIX `gettimeofday()`.

     struct timeval tv;
     gettimeofday(&tv, NULL);

     Timestamp timestamp;
     timestamp.set_seconds(tv.tv_sec);
     timestamp.set_nanos(tv.tv_usec * 1000);

 Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

     FILETIME ft;
     GetSystemTimeAsFileTime(&ft);
     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
     Timestamp timestamp;
     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

 Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

     long millis = System.currentTimeMillis();

     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
         .setNanos((int) ((millis % 1000) * 1000000)).build();

 Example 5: Compute Timestamp from Java `Instant.now()`.

     Instant now = Instant.now();

     Timestamp timestamp =
         Timestamp.newBuilder().setSeconds(now.getEpochSecond())
             .setNanos(now.getNano()).build();

 Example 6: Compute Timestamp from current time in Python.

     timestamp = Timestamp()
     timestamp.GetCurrentTime()

 # JSON Mapping

 In JSON format, the Timestamp type is encoded as a string in the
 [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 where {year} is always expressed using four digits while {month}, {day},
 {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 is required. A proto3 JSON serializer should always use UTC (as indicated by
 "Z") when printing the Timestamp type and a proto3 JSON parser should be
 able to accept both UTC and other timezones (as indicated by an offset).

 For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 01:30 UTC on January 15, 2017.

 In JavaScript, one can convert a Date object to this format using the
 standard
 [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 method. In Python, a standard `datetime.datetime` object can be converted
 to this format using
 [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 the Joda Time's [`ISODateTimeFormat.dateTime()`](
 http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
 ) to obtain a formatter capable of generating timestamps in this format.
"""
type GoogleProtobufTimestamp {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean

  """
  Non-negative fractions of a second at nanosecond resolution. Negative
   second values with fractions must still have non-negative nanos values
   that count forward in time. Must be from 0 to 999,999,999
   inclusive.
  """
  nanos: Int

  """
  Represents seconds of UTC time since Unix epoch
   1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   9999-12-31T23:59:59Z inclusive.
  """
  seconds: String
}

"""
A Timestamp represents a point in time independent of any time zone or local
 calendar, encoded as a count of seconds and fractions of seconds at
 nanosecond resolution. The count is relative to an epoch at UTC midnight on
 January 1, 1970, in the proleptic Gregorian calendar which extends the
 Gregorian calendar backwards to year one.

 All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 second table is needed for interpretation, using a [24-hour linear
 smear](https://developers.google.com/time/smear).

 The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 restricting to that range, we ensure that we can convert to and from [RFC
 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

 # Examples

 Example 1: Compute Timestamp from POSIX `time()`.

     Timestamp timestamp;
     timestamp.set_seconds(time(NULL));
     timestamp.set_nanos(0);

 Example 2: Compute Timestamp from POSIX `gettimeofday()`.

     struct timeval tv;
     gettimeofday(&tv, NULL);

     Timestamp timestamp;
     timestamp.set_seconds(tv.tv_sec);
     timestamp.set_nanos(tv.tv_usec * 1000);

 Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

     FILETIME ft;
     GetSystemTimeAsFileTime(&ft);
     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
     Timestamp timestamp;
     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

 Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

     long millis = System.currentTimeMillis();

     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
         .setNanos((int) ((millis % 1000) * 1000000)).build();

 Example 5: Compute Timestamp from Java `Instant.now()`.

     Instant now = Instant.now();

     Timestamp timestamp =
         Timestamp.newBuilder().setSeconds(now.getEpochSecond())
             .setNanos(now.getNano()).build();

 Example 6: Compute Timestamp from current time in Python.

     timestamp = Timestamp()
     timestamp.GetCurrentTime()

 # JSON Mapping

 In JSON format, the Timestamp type is encoded as a string in the
 [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 where {year} is always expressed using four digits while {month}, {day},
 {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 is required. A proto3 JSON serializer should always use UTC (as indicated by
 "Z") when printing the Timestamp type and a proto3 JSON parser should be
 able to accept both UTC and other timezones (as indicated by an offset).

 For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 01:30 UTC on January 15, 2017.

 In JavaScript, one can convert a Date object to this format using the
 standard
 [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 method. In Python, a standard `datetime.datetime` object can be converted
 to this format using
 [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 the Joda Time's [`ISODateTimeFormat.dateTime()`](
 http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
 ) to obtain a formatter capable of generating timestamps in this format.
"""
input GoogleProtobufTimestampInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean

  """
  Non-negative fractions of a second at nanosecond resolution. Negative
   second values with fractions must still have non-negative nanos values
   that count forward in time. Must be from 0 to 999,999,999
   inclusive.
  """
  nanos: Int

  """
  Represents seconds of UTC time since Unix epoch
   1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   9999-12-31T23:59:59Z inclusive.
  """
  seconds: String
}

"""Key-value pair for the map field viewCounts of INT32."""
type IntMapEntry {
  key: String!
  value: Int!
}

"""Key-value pair for the map field viewCounts of INT32."""
input IntMapEntryInput {
  key: String!
  value: Int!
}

type Mutation {
  """Adds a comment to a post."""
  boardV1BoardServiceAddComment(
    """Message representing a comment on a post."""
    input: BoardV1CommentInput!
  ): BoardV1Comment

  """Creates a new post."""
  boardV1BoardServiceCreatePost(
    """Message representing a post on the board."""
    input: BoardV1PostInput!
  ): BoardV1Post

  """Deletes a post."""
  boardV1BoardServiceDeletePost(
    """Message representing a post on the board."""
    input: BoardV1PostInput!
  ): GoogleProtobufEmpty

  """Creates a new user."""
  userV1UserServiceCreateUser(
    """Message representing a user."""
    input: UserV1UserInput!
  ): UserV1User

  """Deletes a user."""
  userV1UserServiceDeleteUser(
    """Message representing a user."""
    input: UserV1UserInput!
  ): GoogleProtobufEmpty
}

type Query {
  """Retrieves a single post."""
  boardV1BoardServiceGetPost(
    """
    A generic empty message that you can re-use to avoid defining duplicated
     empty messages in your APIs. A typical example is to use it as the request
     or the response type of an API method. For instance:
    
         service Foo {
           rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
         }
    """
    input: GoogleProtobufEmptyInput!
  ): BoardV1Post

  """Retrieves a list of posts based on query parameters."""
  boardV1BoardServiceListPosts(
    """Message for querying posts."""
    input: BoardV1PostQueryInput!
  ): BoardV1PostList

  """Retrieves a single user."""
  userV1UserServiceGetUser(
    """
    A generic empty message that you can re-use to avoid defining duplicated
     empty messages in your APIs. A typical example is to use it as the request
     or the response type of an API method. For instance:
    
         service Foo {
           rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
         }
    """
    input: GoogleProtobufEmptyInput!
  ): UserV1User

  """Retrieves a list of users based on query parameters."""
  userV1UserServiceListUsers(
    """Message for querying users. References User indirectly."""
    input: UserV1UserQueryInput!
  ): UserV1UserList
}

"""
Key-value pair for the map field reactionStatuses of board.v1.PostStatus.
"""
type String_BoardV1PostStatusMapEntry {
  key: String!
  value: BoardV1PostStatus!
}

"""
Key-value pair for the map field reactionStatuses of board.v1.PostStatus.
"""
input String_BoardV1PostStatusMapEntryInput {
  key: String!
  value: BoardV1PostStatus!
}

"""
Key-value pair for the map field attachments of board.v1.Post.Attachment.
"""
type String_BoardV1Post_AttachmentMapEntry {
  key: String!
  value: BoardV1Post_Attachment!
}

"""
Key-value pair for the map field attachments of board.v1.Post.Attachment.
"""
input String_BoardV1Post_AttachmentMapEntryInput {
  key: String!
  value: BoardV1Post_AttachmentInput!
}

"""
Key-value pair for the map field accountSettings of user.v1.UserStatus.
"""
type String_UserV1UserStatusMapEntry {
  key: String!
  value: UserV1UserStatus!
}

"""
Key-value pair for the map field accountSettings of user.v1.UserStatus.
"""
input String_UserV1UserStatusMapEntryInput {
  key: String!
  value: UserV1UserStatus!
}

"""Key-value pair for the map field addresses of user.v1.User.Address."""
type String_UserV1User_AddressMapEntry {
  key: String!
  value: UserV1User_Address!
}

"""Key-value pair for the map field addresses of user.v1.User.Address."""
input String_UserV1User_AddressMapEntryInput {
  key: String!
  value: UserV1User_AddressInput!
}

"""Message representing a user."""
type UserV1User {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean

  """Map field with enum value type."""
  accountSettings: [String_UserV1UserStatusMapEntry!]

  """
  Address field with message value type.
   Deprecated field, should not be used in new code.
  """
  address: UserV1User_Address @deprecated(reason: "Deprecated. See the comments for more details.")

  """Map field with message value type."""
  addresses: [String_UserV1User_AddressMapEntry!]
  createdAt: GoogleProtobufTimestamp
  id: ID!

  """Map field with scalar value type."""
  loginCounts: [IntMapEntry!]
  name: String
  rawId: String
  status: UserV1UserStatus
}

"""Nested enum within Address for address type."""
enum UserV1UserAddress_AddressType {
  HOME
  OTHER
  WORK
}

"""Message representing a user."""
input UserV1UserInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean

  """Map field with enum value type."""
  accountSettings: [String_UserV1UserStatusMapEntryInput!]

  """
  Address field with message value type.
   Deprecated field, should not be used in new code.
  """
  address: UserV1User_AddressInput @deprecated(reason: "Deprecated. See the comments for more details.")

  """Map field with message value type."""
  addresses: [String_UserV1User_AddressMapEntryInput!]
  createdAt: GoogleProtobufTimestampInput
  id: String

  """Map field with scalar value type."""
  loginCounts: [IntMapEntryInput!]
  name: String
  status: UserV1UserStatus
}

"""Message representing a list of users."""
type UserV1UserList {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean
  totalUsers: Int
  users: [UserV1User!]
}

"""Message for querying users. References User indirectly."""
input UserV1UserQueryInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean
  endDate: GoogleProtobufTimestampInput
  pageNumber: Int
  resultsPerPage: Int
  searchTerm: String
  startDate: GoogleProtobufTimestampInput
}

"""Top-level enum for user status."""
enum UserV1UserStatus {
  ACTIVE
  BANNED
  INACTIVE
  UNKNOWN
}

"""Nested message representing an address."""
type UserV1User_Address {
  """
  Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.
  """
  _: Boolean
  city: String
  postalCode: String
  state: String
  street: String
  type: UserV1UserAddress_AddressType
}

"""Nested message representing an address."""
input UserV1User_AddressInput {
  """
  Fake field because GraphQL does not support empty input. Do not use, It does nothing.
  """
  _: Boolean
  city: String
  postalCode: String
  state: String
  street: String
  type: UserV1UserAddress_AddressType
}