// @generated by protoc-gen-es v2.2.5
// @generated from file post/post.proto (package post.v1, syntax proto3)
/* eslint-disable */

import type { Message } from '@bufbuild/protobuf';
import type {
  GenEnum,
  GenFile,
  GenMessage,
  GenService,
} from '@bufbuild/protobuf/codegenv1';
import type { EmptySchema } from '../google/protobuf/empty_pb';
import type { Timestamp } from '../google/protobuf/timestamp_pb';
import type { User } from '../user_pb';

/**
 * Describes the file post/post.proto.
 */
export declare const file_post_post: GenFile;

/**
 * Post message
 *
 * @generated from message post.v1.Post
 */
export declare type Post = Message<'post.v1.Post'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: string content = 3;
   */
  content: string;

  /**
   * @generated from field: post.v1.PostStatus status = 4;
   */
  status: PostStatus;

  /**
   * @generated from field: post.v1.PostCategory category = 5;
   */
  category: PostCategory;

  /**
   * Reference to User
   *
   * @generated from field: string author_id = 6;
   */
  authorId: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  /**
   * Metadata as key-value pairs
   *
   * @generated from field: map<string, string> metadata = 9;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: repeated string tags = 10;
   */
  tags: string[];
};

/**
 * Describes the message post.v1.Post.
 * Use `create(PostSchema)` to create a new message.
 */
export declare const PostSchema: GenMessage<Post>;

/**
 * Create Post Request
 *
 * @generated from message post.v1.CreatePostRequest
 */
export declare type CreatePostRequest = Message<'post.v1.CreatePostRequest'> & {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: string content = 2;
   */
  content: string;

  /**
   * @generated from field: post.v1.PostStatus status = 3;
   */
  status: PostStatus;

  /**
   * @generated from field: post.v1.PostCategory category = 4;
   */
  category: PostCategory;

  /**
   * @generated from field: string author_id = 5;
   */
  authorId: string;

  /**
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: repeated string tags = 7;
   */
  tags: string[];
};

/**
 * Describes the message post.v1.CreatePostRequest.
 * Use `create(CreatePostRequestSchema)` to create a new message.
 */
export declare const CreatePostRequestSchema: GenMessage<CreatePostRequest>;

/**
 * Update Post Request
 *
 * @generated from message post.v1.UpdatePostRequest
 */
export declare type UpdatePostRequest = Message<'post.v1.UpdatePostRequest'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: string content = 3;
   */
  content: string;

  /**
   * @generated from field: post.v1.PostStatus status = 4;
   */
  status: PostStatus;

  /**
   * @generated from field: post.v1.PostCategory category = 5;
   */
  category: PostCategory;

  /**
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: repeated string tags = 7;
   */
  tags: string[];
};

/**
 * Describes the message post.v1.UpdatePostRequest.
 * Use `create(UpdatePostRequestSchema)` to create a new message.
 */
export declare const UpdatePostRequestSchema: GenMessage<UpdatePostRequest>;

/**
 * Get Post Request
 *
 * @generated from message post.v1.GetPostRequest
 */
export declare type GetPostRequest = Message<'post.v1.GetPostRequest'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message post.v1.GetPostRequest.
 * Use `create(GetPostRequestSchema)` to create a new message.
 */
export declare const GetPostRequestSchema: GenMessage<GetPostRequest>;

/**
 * Delete Post Request
 *
 * @generated from message post.v1.DeletePostRequest
 */
export declare type DeletePostRequest = Message<'post.v1.DeletePostRequest'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message post.v1.DeletePostRequest.
 * Use `create(DeletePostRequestSchema)` to create a new message.
 */
export declare const DeletePostRequestSchema: GenMessage<DeletePostRequest>;

/**
 * List Posts Request
 *
 * @generated from message post.v1.ListPostsRequest
 */
export declare type ListPostsRequest = Message<'post.v1.ListPostsRequest'> & {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * @generated from field: post.v1.PostListFilter filter = 3;
   */
  filter: PostListFilter;

  /**
   * @generated from field: post.v1.PostCategory category = 4;
   */
  category: PostCategory;
};

/**
 * Describes the message post.v1.ListPostsRequest.
 * Use `create(ListPostsRequestSchema)` to create a new message.
 */
export declare const ListPostsRequestSchema: GenMessage<ListPostsRequest>;

/**
 * List Posts Response
 *
 * @generated from message post.v1.ListPostsResponse
 */
export declare type ListPostsResponse = Message<'post.v1.ListPostsResponse'> & {
  /**
   * @generated from field: repeated post.v1.Post posts = 1;
   */
  posts: Post[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * @generated from field: int32 total_count = 3;
   */
  totalCount: number;
};

/**
 * Describes the message post.v1.ListPostsResponse.
 * Use `create(ListPostsResponseSchema)` to create a new message.
 */
export declare const ListPostsResponseSchema: GenMessage<ListPostsResponse>;

/**
 * Get Post with Author
 *
 * @generated from message post.v1.GetPostWithAuthorRequest
 */
export declare type GetPostWithAuthorRequest =
  Message<'post.v1.GetPostWithAuthorRequest'> & {
    /**
     * @generated from field: string id = 1;
     */
    id: string;
  };

/**
 * Describes the message post.v1.GetPostWithAuthorRequest.
 * Use `create(GetPostWithAuthorRequestSchema)` to create a new message.
 */
export declare const GetPostWithAuthorRequestSchema: GenMessage<GetPostWithAuthorRequest>;

/**
 * @generated from message post.v1.PostWithAuthor
 */
export declare type PostWithAuthor = Message<'post.v1.PostWithAuthor'> & {
  /**
   * @generated from field: post.v1.Post post = 1;
   */
  post?: Post;

  /**
   * @generated from field: user.v1.User author = 2;
   */
  author?: User;
};

/**
 * Describes the message post.v1.PostWithAuthor.
 * Use `create(PostWithAuthorSchema)` to create a new message.
 */
export declare const PostWithAuthorSchema: GenMessage<PostWithAuthor>;

/**
 * Post status enum
 *
 * @generated from enum post.v1.PostStatus
 */
export enum PostStatus {
  /**
   * @generated from enum value: POST_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: POST_STATUS_DRAFT = 1;
   */
  DRAFT = 1,

  /**
   * @generated from enum value: POST_STATUS_PUBLISHED = 2;
   */
  PUBLISHED = 2,

  /**
   * @generated from enum value: POST_STATUS_ARCHIVED = 3;
   */
  ARCHIVED = 3,
}

/**
 * Describes the enum post.v1.PostStatus.
 */
export declare const PostStatusSchema: GenEnum<PostStatus>;

/**
 * Category enum for posts
 *
 * @generated from enum post.v1.PostCategory
 */
export enum PostCategory {
  /**
   * @generated from enum value: POST_CATEGORY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: POST_CATEGORY_TECHNOLOGY = 1;
   */
  TECHNOLOGY = 1,

  /**
   * @generated from enum value: POST_CATEGORY_HEALTH = 2;
   */
  HEALTH = 2,

  /**
   * @generated from enum value: POST_CATEGORY_TRAVEL = 3;
   */
  TRAVEL = 3,

  /**
   * @generated from enum value: POST_CATEGORY_FOOD = 4;
   */
  FOOD = 4,

  /**
   * @generated from enum value: POST_CATEGORY_LIFESTYLE = 5;
   */
  LIFESTYLE = 5,
}

/**
 * Describes the enum post.v1.PostCategory.
 */
export declare const PostCategorySchema: GenEnum<PostCategory>;

/**
 * Filter type for listing posts
 *
 * @generated from enum post.v1.PostListFilter
 */
export enum PostListFilter {
  /**
   * @generated from enum value: POST_LIST_FILTER_ALL = 0;
   */
  ALL = 0,

  /**
   * @generated from enum value: POST_LIST_FILTER_PUBLISHED = 1;
   */
  PUBLISHED = 1,

  /**
   * @generated from enum value: POST_LIST_FILTER_DRAFTS = 2;
   */
  DRAFTS = 2,

  /**
   * @generated from enum value: POST_LIST_FILTER_ARCHIVED = 3;
   */
  ARCHIVED = 3,
}

/**
 * Describes the enum post.v1.PostListFilter.
 */
export declare const PostListFilterSchema: GenEnum<PostListFilter>;

/**
 * Post service
 *
 * @generated from service post.v1.PostService
 */
export declare const PostService: GenService<{
  /**
   * Create a new post
   *
   * @generated from rpc post.v1.PostService.CreatePost
   */
  createPost: {
    methodKind: 'unary';
    input: typeof CreatePostRequestSchema;
    output: typeof PostSchema;
  };
  /**
   * Get a post by ID
   *
   * @generated from rpc post.v1.PostService.GetPost
   */
  getPost: {
    methodKind: 'unary';
    input: typeof GetPostRequestSchema;
    output: typeof PostSchema;
  };
  /**
   * Update an existing post
   *
   * @generated from rpc post.v1.PostService.UpdatePost
   */
  updatePost: {
    methodKind: 'unary';
    input: typeof UpdatePostRequestSchema;
    output: typeof PostSchema;
  };
  /**
   * Delete a post
   *
   * @generated from rpc post.v1.PostService.DeletePost
   */
  deletePost: {
    methodKind: 'unary';
    input: typeof DeletePostRequestSchema;
    output: typeof EmptySchema;
  };
  /**
   * List posts with filtering
   *
   * @generated from rpc post.v1.PostService.ListPosts
   */
  listPosts: {
    methodKind: 'unary';
    input: typeof ListPostsRequestSchema;
    output: typeof ListPostsResponseSchema;
  };
  /**
   * Get post with author information
   *
   * @generated from rpc post.v1.PostService.GetPostWithAuthor
   */
  getPostWithAuthor: {
    methodKind: 'unary';
    input: typeof GetPostWithAuthorRequestSchema;
    output: typeof PostWithAuthorSchema;
  };
}>;
