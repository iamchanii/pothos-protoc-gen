syntax = "proto3";

package user.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// Top-level enum for user status.
enum UserStatus {
  UNKNOWN  = 0;
  ACTIVE   = 1;
  INACTIVE = 2;
  BANNED   = 3;
}

// Message representing a user.
message User {
  string id = 1;
  string name = 2;
  UserStatus status = 3;
  google.protobuf.Timestamp created_at = 4;

  // Map field with scalar value type.
  map<string, int32> login_counts = 5;

  // Map field with enum value type.
  map<string, UserStatus> account_settings = 6;

  // Address field with message value type.
  // Deprecated field, should not be used in new code.
  Address address = 7 [deprecated = true];

  // Map field with message value type.
  map<string, Address> addresses = 8;

  // Nested message representing an address.
  message Address {
    string street = 1;
    string city = 2;
    string state = 3;
    string postal_code = 4;

    // Nested enum within Address for address type.
    enum AddressType {
      HOME  = 0;
      WORK  = 1;
      OTHER = 2;
    }
    AddressType type = 5;
  }

  google.protobuf.Struct metadata = 9;
}

// Message for querying users. References User indirectly.
message UserQuery {
  string search_term = 1;
  int32 page_number = 2;
  int32 results_per_page = 3;
  google.protobuf.Timestamp start_date = 4;
  google.protobuf.Timestamp end_date = 5;
}

// Message representing a list of users.
message UserList {
  repeated User users = 1;
  int32 total_users = 2;
}

// Service with multiple RPC calls.
service UserService {
  // Retrieves a single user.
  rpc GetUser(google.protobuf.Empty) returns (User);

  // Retrieves a list of users based on query parameters.
  rpc ListUsers(UserQuery) returns (UserList);

  // Creates a new user.
  rpc CreateUser(User) returns (User);

  // Deletes a user.
  rpc DeleteUser(User) returns (google.protobuf.Empty);
}
