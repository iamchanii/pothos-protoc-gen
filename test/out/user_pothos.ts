// @generated by pothos-protoc-gen v0.0.3 with parameter "builder_path=../builder"
// @generated from file user.proto (package user.v1, syntax proto3)
/* eslint-disable */

import { enumFromJson } from '@bufbuild/protobuf';
import { builder } from '../builder';
import type {
  CreateUserResponse,
  DeleteUserResponse,
  GetUserResponse,
  ListUsersResponse,
  UpdateUserResponse,
  User,
} from './user_pb';
import { UserRoleSchema, User_UserStatusSchema } from './user_pb';

/**
 * User role enum type
 *
 * @generated from enum user.v1.UserRole
 */
export const UserV1UserRoleRef = builder.enumType('UserV1UserRole', {
  description: 'User role enum type',
  values: {
    /**
     * @generated from enum value: ROLE_UNSPECIFIED = 0;
     */
    ROLE_UNSPECIFIED: {
      value: enumFromJson(UserRoleSchema, 'ROLE_UNSPECIFIED'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_ADMIN = 1;
     */
    ROLE_ADMIN: {
      value: enumFromJson(UserRoleSchema, 'ROLE_ADMIN'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_USER = 2;
     */
    ROLE_USER: {
      value: enumFromJson(UserRoleSchema, 'ROLE_USER'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: ROLE_GUEST = 3;
     */
    ROLE_GUEST: {
      value: enumFromJson(UserRoleSchema, 'ROLE_GUEST'),
      description: '',
      deprecated: false,
    },
  } as const,
});

/**
 * User status enum type for filtering
 *
 * @generated from enum user.v1.User.UserStatus
 */
export const UserV1User_UserStatusRef = builder.enumType(
  'UserV1User_UserStatus',
  {
    description: 'User status enum type for filtering',
    values: {
      /**
       * @generated from enum value: STATUS_UNSPECIFIED = 0;
       */
      STATUS_UNSPECIFIED: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_UNSPECIFIED'),
        description: '',
        deprecated: false,
      },
      /**
       * @generated from enum value: STATUS_ACTIVE = 1;
       */
      STATUS_ACTIVE: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_ACTIVE'),
        description: '',
        deprecated: false,
      },
      /**
       * @generated from enum value: STATUS_INACTIVE = 2;
       */
      STATUS_INACTIVE: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_INACTIVE'),
        description: '',
        deprecated: false,
      },
      /**
       * @generated from enum value: STATUS_SUSPENDED = 3;
       */
      STATUS_SUSPENDED: {
        value: enumFromJson(User_UserStatusSchema, 'STATUS_SUSPENDED'),
        description: '',
        deprecated: false,
      },
    } as const,
  },
);

/**
 * @generated from message user.v1.CreateUserResponse
 */
export const UserV1CreateUserResponseRef = builder
  .objectRef<CreateUserResponse>('UserV1CreateUserResponse')
  .implement({
    description: '',
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: user.v1.User user = 1;
       */
      user: t.field({
        type: "'' as never",
        description: "'' as never",
        deprecatedReason: "'' as never",
        resolve: () => null,
      }),
    }),
  });

/**
 * Main User message
 *
 * @generated from message user.v1.User
 */
export const UserV1UserRef = builder.objectRef<User>('UserV1User').implement({
  description: 'Main User message',
  fields: (t) => ({
    _: t.boolean({
      resolve: () => false,
      description:
        'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
    }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * @generated from field: string name = 2;
     */
    name: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * @generated from field: string email = 3;
     */
    email: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * @generated from field: user.v1.UserRole role = 4;
     */
    role: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * @generated from field: user.v1.User.UserStatus status = 5;
     */
    status: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * Map type field
     *
     * @generated from field: map<string, string> metadata = 6;
     */
    metadata: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * @generated from field: repeated string tags = 7;
     */
    tags: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * @generated from field: int64 created_at = 8;
     */
    createdAt: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
    /**
     * @generated from field: int64 updated_at = 9;
     */
    updatedAt: t.field({
      type: "'' as never",
      description: "'' as never",
      deprecatedReason: "'' as never",
      resolve: () => null,
    }),
  }),
});

/**
 * @generated from message user.v1.GetUserResponse
 */
export const UserV1GetUserResponseRef = builder
  .objectRef<GetUserResponse>('UserV1GetUserResponse')
  .implement({
    description: '',
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: user.v1.User user = 1;
       */
      user: t.field({
        type: "'' as never",
        description: "'' as never",
        deprecatedReason: "'' as never",
        resolve: () => null,
      }),
    }),
  });

/**
 * @generated from message user.v1.UpdateUserResponse
 */
export const UserV1UpdateUserResponseRef = builder
  .objectRef<UpdateUserResponse>('UserV1UpdateUserResponse')
  .implement({
    description: '',
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: user.v1.User user = 1;
       */
      user: t.field({
        type: "'' as never",
        description: "'' as never",
        deprecatedReason: "'' as never",
        resolve: () => null,
      }),
    }),
  });

/**
 * @generated from message user.v1.DeleteUserResponse
 */
export const UserV1DeleteUserResponseRef = builder
  .objectRef<DeleteUserResponse>('UserV1DeleteUserResponse')
  .implement({
    description: '',
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: bool success = 1;
       */
      success: t.field({
        type: "'' as never",
        description: "'' as never",
        deprecatedReason: "'' as never",
        resolve: () => null,
      }),
    }),
  });

/**
 * @generated from message user.v1.ListUsersResponse
 */
export const UserV1ListUsersResponseRef = builder
  .objectRef<ListUsersResponse>('UserV1ListUsersResponse')
  .implement({
    description: '',
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: repeated user.v1.User users = 1;
       */
      users: t.field({
        type: "'' as never",
        description: "'' as never",
        deprecatedReason: "'' as never",
        resolve: () => null,
      }),
      /**
       * @generated from field: string next_page_token = 2;
       */
      nextPageToken: t.field({
        type: "'' as never",
        description: "'' as never",
        deprecatedReason: "'' as never",
        resolve: () => null,
      }),
      /**
       * @generated from field: int32 total_count = 3;
       */
      totalCount: t.field({
        type: "'' as never",
        description: "'' as never",
        deprecatedReason: "'' as never",
        resolve: () => null,
      }),
    }),
  });
