syntax = "proto3";

package user.v1;

// User role enum type
enum UserRole {
    ROLE_UNSPECIFIED = 0;
    ROLE_ADMIN = 1;
    ROLE_USER = 2;
    ROLE_GUEST = 3;
}


// Main User message
message User {
    string id = 1;
    string name = 2;
    string email = 3;
    UserRole role = 4;
    UserStatus status = 5;
    map<string, string> metadata = 6; // Map type field
    repeated string tags = 7;
    int64 created_at = 8;
    int64 updated_at = 9;

    // User status enum type for filtering
    enum UserStatus {
        STATUS_UNSPECIFIED = 0;
        STATUS_ACTIVE = 1;
        STATUS_INACTIVE = 2;
        STATUS_SUSPENDED = 3;
    }
}

// Create
message CreateUserRequest {
    string name = 1;
    string email = 2;
    UserRole role = 3;
    map<string, string> metadata = 4;
    repeated string tags = 5;
}

message CreateUserResponse {
    User user = 1;
}

// Read
message GetUserRequest {
    string id = 1;
}

message GetUserResponse {
    User user = 1;
}

// Update
message UpdateUserRequest {
    string id = 1;
    optional string name = 2;
    optional string email = 3;
    optional UserRole role = 4;
    optional User.UserStatus status = 5;
    map<string, string> metadata = 6;
    repeated string tags = 7;
}

message UpdateUserResponse {
    User user = 1;
}

// Delete
message DeleteUserRequest {
    string id = 1;
}

message DeleteUserResponse {
    bool success = 1;
}

// List
message ListUsersRequest {
    int32 page_size = 1;
    string page_token = 2;
    // Enum fields for filtering
    optional User.UserStatus status = 3;
    optional UserRole role = 4;
}

message ListUsersResponse {
    repeated User users = 1;
    string next_page_token = 2;
    int32 total_count = 3;
}

// User Service with CRUD operations
service UserService {
    // Create a new user
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    
    // Get a user by ID
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    
    // Update an existing user
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    
    // Delete a user
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    
    // List users with optional filtering
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}