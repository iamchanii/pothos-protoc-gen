// @generated by protoc-gen-es v2.2.5
// @generated from file user.proto (package user.v1, syntax proto3)
/* eslint-disable */

import type { Message } from '@bufbuild/protobuf';
import type {
  GenEnum,
  GenFile,
  GenMessage,
  GenService,
} from '@bufbuild/protobuf/codegenv1';

/**
 * Describes the file user.proto.
 */
export declare const file_user: GenFile;

/**
 * Main User message
 *
 * @generated from message user.v1.User
 */
export declare type User = Message<'user.v1.User'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string email = 3;
   */
  email: string;

  /**
   * @generated from field: user.v1.UserRole role = 4;
   */
  role: UserRole;

  /**
   * @generated from field: user.v1.User.UserStatus status = 5;
   */
  status: User_UserStatus;

  /**
   * Map type field
   *
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: repeated string tags = 7;
   */
  tags: string[];

  /**
   * @generated from field: int64 created_at = 8;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 updated_at = 9;
   */
  updatedAt: bigint;
};

/**
 * Describes the message user.v1.User.
 * Use `create(UserSchema)` to create a new message.
 */
export declare const UserSchema: GenMessage<User>;

/**
 * User status enum type for filtering
 *
 * @generated from enum user.v1.User.UserStatus
 */
export enum User_UserStatus {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_ACTIVE = 1;
   */
  STATUS_ACTIVE = 1,

  /**
   * @generated from enum value: STATUS_INACTIVE = 2;
   */
  STATUS_INACTIVE = 2,

  /**
   * @generated from enum value: STATUS_SUSPENDED = 3;
   */
  STATUS_SUSPENDED = 3,
}

/**
 * Describes the enum user.v1.User.UserStatus.
 */
export declare const User_UserStatusSchema: GenEnum<User_UserStatus>;

/**
 * Create
 *
 * @generated from message user.v1.CreateUserRequest
 */
export declare type CreateUserRequest = Message<'user.v1.CreateUserRequest'> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string email = 2;
   */
  email: string;

  /**
   * @generated from field: user.v1.UserRole role = 3;
   */
  role: UserRole;

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];
};

/**
 * Describes the message user.v1.CreateUserRequest.
 * Use `create(CreateUserRequestSchema)` to create a new message.
 */
export declare const CreateUserRequestSchema: GenMessage<CreateUserRequest>;

/**
 * @generated from message user.v1.CreateUserResponse
 */
export declare type CreateUserResponse =
  Message<'user.v1.CreateUserResponse'> & {
    /**
     * @generated from field: user.v1.User user = 1;
     */
    user?: User;
  };

/**
 * Describes the message user.v1.CreateUserResponse.
 * Use `create(CreateUserResponseSchema)` to create a new message.
 */
export declare const CreateUserResponseSchema: GenMessage<CreateUserResponse>;

/**
 * Read
 *
 * @generated from message user.v1.GetUserRequest
 */
export declare type GetUserRequest = Message<'user.v1.GetUserRequest'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message user.v1.GetUserRequest.
 * Use `create(GetUserRequestSchema)` to create a new message.
 */
export declare const GetUserRequestSchema: GenMessage<GetUserRequest>;

/**
 * @generated from message user.v1.GetUserResponse
 */
export declare type GetUserResponse = Message<'user.v1.GetUserResponse'> & {
  /**
   * @generated from field: user.v1.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message user.v1.GetUserResponse.
 * Use `create(GetUserResponseSchema)` to create a new message.
 */
export declare const GetUserResponseSchema: GenMessage<GetUserResponse>;

/**
 * Update
 *
 * @generated from message user.v1.UpdateUserRequest
 */
export declare type UpdateUserRequest = Message<'user.v1.UpdateUserRequest'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string email = 3;
   */
  email?: string;

  /**
   * @generated from field: optional user.v1.UserRole role = 4;
   */
  role?: UserRole;

  /**
   * @generated from field: optional user.v1.User.UserStatus status = 5;
   */
  status?: User_UserStatus;

  /**
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: repeated string tags = 7;
   */
  tags: string[];
};

/**
 * Describes the message user.v1.UpdateUserRequest.
 * Use `create(UpdateUserRequestSchema)` to create a new message.
 */
export declare const UpdateUserRequestSchema: GenMessage<UpdateUserRequest>;

/**
 * @generated from message user.v1.UpdateUserResponse
 */
export declare type UpdateUserResponse =
  Message<'user.v1.UpdateUserResponse'> & {
    /**
     * @generated from field: user.v1.User user = 1;
     */
    user?: User;
  };

/**
 * Describes the message user.v1.UpdateUserResponse.
 * Use `create(UpdateUserResponseSchema)` to create a new message.
 */
export declare const UpdateUserResponseSchema: GenMessage<UpdateUserResponse>;

/**
 * Delete
 *
 * @generated from message user.v1.DeleteUserRequest
 */
export declare type DeleteUserRequest = Message<'user.v1.DeleteUserRequest'> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message user.v1.DeleteUserRequest.
 * Use `create(DeleteUserRequestSchema)` to create a new message.
 */
export declare const DeleteUserRequestSchema: GenMessage<DeleteUserRequest>;

/**
 * @generated from message user.v1.DeleteUserResponse
 */
export declare type DeleteUserResponse =
  Message<'user.v1.DeleteUserResponse'> & {
    /**
     * @generated from field: bool success = 1;
     */
    success: boolean;
  };

/**
 * Describes the message user.v1.DeleteUserResponse.
 * Use `create(DeleteUserResponseSchema)` to create a new message.
 */
export declare const DeleteUserResponseSchema: GenMessage<DeleteUserResponse>;

/**
 * List
 *
 * @generated from message user.v1.ListUsersRequest
 */
export declare type ListUsersRequest = Message<'user.v1.ListUsersRequest'> & {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Enum fields for filtering
   *
   * @generated from field: optional user.v1.User.UserStatus status = 3;
   */
  status?: User_UserStatus;

  /**
   * @generated from field: optional user.v1.UserRole role = 4;
   */
  role?: UserRole;
};

/**
 * Describes the message user.v1.ListUsersRequest.
 * Use `create(ListUsersRequestSchema)` to create a new message.
 */
export declare const ListUsersRequestSchema: GenMessage<ListUsersRequest>;

/**
 * @generated from message user.v1.ListUsersResponse
 */
export declare type ListUsersResponse = Message<'user.v1.ListUsersResponse'> & {
  /**
   * @generated from field: repeated user.v1.User users = 1;
   */
  users: User[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * @generated from field: int32 total_count = 3;
   */
  totalCount: number;
};

/**
 * Describes the message user.v1.ListUsersResponse.
 * Use `create(ListUsersResponseSchema)` to create a new message.
 */
export declare const ListUsersResponseSchema: GenMessage<ListUsersResponse>;

/**
 * User role enum type
 *
 * @generated from enum user.v1.UserRole
 */
export enum UserRole {
  /**
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  ROLE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROLE_ADMIN = 1;
   */
  ROLE_ADMIN = 1,

  /**
   * @generated from enum value: ROLE_USER = 2;
   */
  ROLE_USER = 2,

  /**
   * @generated from enum value: ROLE_GUEST = 3;
   */
  ROLE_GUEST = 3,
}

/**
 * Describes the enum user.v1.UserRole.
 */
export declare const UserRoleSchema: GenEnum<UserRole>;

/**
 * User Service with CRUD operations
 *
 * @generated from service user.v1.UserService
 */
export declare const UserService: GenService<{
  /**
   * Create a new user
   *
   * @generated from rpc user.v1.UserService.CreateUser
   */
  createUser: {
    methodKind: 'unary';
    input: typeof CreateUserRequestSchema;
    output: typeof CreateUserResponseSchema;
  };
  /**
   * Get a user by ID
   *
   * @generated from rpc user.v1.UserService.GetUser
   */
  getUser: {
    methodKind: 'unary';
    input: typeof GetUserRequestSchema;
    output: typeof GetUserResponseSchema;
  };
  /**
   * Update an existing user
   *
   * @generated from rpc user.v1.UserService.UpdateUser
   */
  updateUser: {
    methodKind: 'unary';
    input: typeof UpdateUserRequestSchema;
    output: typeof UpdateUserResponseSchema;
  };
  /**
   * Delete a user
   *
   * @generated from rpc user.v1.UserService.DeleteUser
   */
  deleteUser: {
    methodKind: 'unary';
    input: typeof DeleteUserRequestSchema;
    output: typeof DeleteUserResponseSchema;
  };
  /**
   * List users with optional filtering
   *
   * @generated from rpc user.v1.UserService.ListUsers
   */
  listUsers: {
    methodKind: 'unary';
    input: typeof ListUsersRequestSchema;
    output: typeof ListUsersResponseSchema;
  };
}>;
