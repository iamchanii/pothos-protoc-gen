// @generated by pothos-protoc-gen v0.0.3 with parameter "builder_path=../builder"
// @generated from file post/post.proto (package post.v1, syntax proto3)
/* eslint-disable */

import { enumFromJson } from '@bufbuild/protobuf';
import { builder } from '../../builder';
import type { ListPostsResponse, Post, PostWithAuthor } from './post_pb';
import {
  PostCategorySchema,
  PostListFilterSchema,
  PostStatusSchema,
} from './post_pb';

/**
 * Post status enum
 *
 * @generated from enum post.v1.PostStatus
 */
export const PostV1PostStatusRef = builder.enumType('PostV1PostStatus', {
  description: 'Post status enum',
  values: {
    /**
     * @generated from enum value: POST_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED: {
      value: enumFromJson(PostStatusSchema, 'POST_STATUS_UNSPECIFIED'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_STATUS_DRAFT = 1;
     */
    DRAFT: {
      value: enumFromJson(PostStatusSchema, 'POST_STATUS_DRAFT'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_STATUS_PUBLISHED = 2;
     */
    PUBLISHED: {
      value: enumFromJson(PostStatusSchema, 'POST_STATUS_PUBLISHED'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_STATUS_ARCHIVED = 3;
     */
    ARCHIVED: {
      value: enumFromJson(PostStatusSchema, 'POST_STATUS_ARCHIVED'),
      description: '',
      deprecated: false,
    },
  } as const,
});

/**
 * Category enum for posts
 *
 * @generated from enum post.v1.PostCategory
 */
export const PostV1PostCategoryRef = builder.enumType('PostV1PostCategory', {
  description: 'Category enum for posts',
  values: {
    /**
     * @generated from enum value: POST_CATEGORY_UNSPECIFIED = 0;
     */
    UNSPECIFIED: {
      value: enumFromJson(PostCategorySchema, 'POST_CATEGORY_UNSPECIFIED'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_TECHNOLOGY = 1;
     */
    TECHNOLOGY: {
      value: enumFromJson(PostCategorySchema, 'POST_CATEGORY_TECHNOLOGY'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_HEALTH = 2;
     */
    HEALTH: {
      value: enumFromJson(PostCategorySchema, 'POST_CATEGORY_HEALTH'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_TRAVEL = 3;
     */
    TRAVEL: {
      value: enumFromJson(PostCategorySchema, 'POST_CATEGORY_TRAVEL'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_FOOD = 4;
     */
    FOOD: {
      value: enumFromJson(PostCategorySchema, 'POST_CATEGORY_FOOD'),
      description: '',
      deprecated: false,
    },
    /**
     * @generated from enum value: POST_CATEGORY_LIFESTYLE = 5;
     */
    LIFESTYLE: {
      value: enumFromJson(PostCategorySchema, 'POST_CATEGORY_LIFESTYLE'),
      description: '',
      deprecated: false,
    },
  } as const,
});

/**
 * Filter type for listing posts
 *
 * @generated from enum post.v1.PostListFilter
 */
export const PostV1PostListFilterRef = builder.enumType(
  'PostV1PostListFilter',
  {
    description: 'Filter type for listing posts',
    values: {
      /**
       * @generated from enum value: POST_LIST_FILTER_ALL = 0;
       */
      ALL: {
        value: enumFromJson(PostListFilterSchema, 'POST_LIST_FILTER_ALL'),
        description: '',
        deprecated: false,
      },
      /**
       * @generated from enum value: POST_LIST_FILTER_PUBLISHED = 1;
       */
      PUBLISHED: {
        value: enumFromJson(PostListFilterSchema, 'POST_LIST_FILTER_PUBLISHED'),
        description: '',
        deprecated: false,
      },
      /**
       * @generated from enum value: POST_LIST_FILTER_DRAFTS = 2;
       */
      DRAFTS: {
        value: enumFromJson(PostListFilterSchema, 'POST_LIST_FILTER_DRAFTS'),
        description: '',
        deprecated: false,
      },
      /**
       * @generated from enum value: POST_LIST_FILTER_ARCHIVED = 3;
       */
      ARCHIVED: {
        value: enumFromJson(PostListFilterSchema, 'POST_LIST_FILTER_ARCHIVED'),
        description: '',
        deprecated: false,
      },
    } as const,
  },
);

/**
 * Post message
 *
 * @generated from message post.v1.Post
 */
export const PostV1PostRef = builder.objectRef<Post>('PostV1Post').implement({
  description: 'Post message',
  fields: (t) => ({
    _: t.boolean({
      resolve: () => false,
      description:
        'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
    }),
    /**
     * @generated from field: string id = 1;
     */
    id: t.field({
      type: 'String',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => parent.id,
    }),
    /**
     * @generated from field: string title = 2;
     */
    title: t.field({
      type: 'String',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => parent.title,
    }),
    /**
     * @generated from field: string content = 3;
     */
    content: t.field({
      type: 'String',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => parent.content,
    }),
    /**
     * @generated from field: post.v1.PostStatus status = 4;
     */
    status: t.field({
      type: 'PostV1PostStatus',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => enumFromJson(PostStatusSchema, parent.status),
    }),
    /**
     * @generated from field: post.v1.PostCategory category = 5;
     */
    category: t.field({
      type: 'PostV1PostCategory',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => enumFromJson(PostCategorySchema, parent.category),
    }),
    /**
     * Reference to User
     *
     * @generated from field: string author_id = 6;
     */
    authorId: t.field({
      type: 'String',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => parent.authorId,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp created_at = 7;
     */
    createdAt: t.field({
      type: 'GoogleProtobufTimestamp',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => parent.createdAt,
    }),
    /**
     * @generated from field: google.protobuf.Timestamp updated_at = 8;
     */
    updatedAt: t.field({
      type: 'GoogleProtobufTimestamp',
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => parent.updatedAt,
    }),
    /**
     * Metadata as key-value pairs
     *
     * @generated from field: map<string, string> metadata = 9 [deprecated = true];
     * @deprecated
     */
    metadata: t.field({
      type: ['StringMapEntry'],
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) =>
        Object.entries(parent.metadata).map(([key, value]) => ({
          key: String(key),
          value: value,
        })),
    }),
    /**
     * @generated from field: repeated string tags = 10;
     */
    tags: t.field({
      type: ['String'],
      description: 'Post message',
      deprecatedReason: '',
      resolve: (parent) => parent.tags,
    }),
  }),
});

/**
 * List Posts Response
 *
 * @generated from message post.v1.ListPostsResponse
 */
export const PostV1ListPostsResponseRef = builder
  .objectRef<ListPostsResponse>('PostV1ListPostsResponse')
  .implement({
    description: 'List Posts Response',
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: repeated post.v1.Post posts = 1;
       */
      posts: t.field({
        type: ['PostV1Post'],
        description: 'List Posts Response',
        deprecatedReason: '',
        resolve: (parent) => parent.posts,
      }),
      /**
       * @generated from field: string next_page_token = 2;
       */
      nextPageToken: t.field({
        type: 'String',
        description: 'List Posts Response',
        deprecatedReason: '',
        resolve: (parent) => parent.nextPageToken,
      }),
      /**
       * @generated from field: int32 total_count = 3;
       */
      totalCount: t.field({
        type: 'Int',
        description: 'List Posts Response',
        deprecatedReason: '',
        resolve: (parent) => parent.totalCount,
      }),
    }),
  });

/**
 * @generated from message post.v1.PostWithAuthor
 */
export const PostV1PostWithAuthorRef = builder
  .objectRef<PostWithAuthor>('PostV1PostWithAuthor')
  .implement({
    description: '',
    fields: (t) => ({
      _: t.boolean({
        resolve: () => false,
        description:
          'Fake field because GraphQL does not support empty objects. Do not query, use __typename instead.',
      }),
      /**
       * @generated from field: post.v1.Post post = 1;
       */
      post: t.field({
        type: 'PostV1Post',
        description: '',
        deprecatedReason: '',
        resolve: (parent) => parent.post,
      }),
      /**
       * @generated from field: user.v1.User author = 2;
       */
      author: t.field({
        type: 'UserV1User',
        description: '',
        deprecatedReason: '',
        resolve: (parent) => parent.author,
      }),
    }),
  });
